{"ast":null,"code":"import{create}from'zustand';import{devtools}from'zustand/middleware';const initialState={session:null,isLoading:false,error:null,isStreamingQuestion:false,currentStreamedText:''};export const useClarificationStore=create()(devtools((set,get)=>({...initialState,initSession:planId=>{const newSession={id:`session-${Date.now()}`,planId,status:'pending',currentQuestionIndex:-1,questions:[],answers:[],createdAt:new Date(),updatedAt:new Date(),isComplete:false};set({session:newSession,isLoading:false,error:null,isStreamingQuestion:false,currentStreamedText:''});},resetSession:()=>{set(initialState);},setCurrentStreamedText:text=>{set({currentStreamedText:text});},setStreamingStatus:isStreaming=>{set({isStreamingQuestion:isStreaming});},addQuestion:question=>{const{session}=get();if(!session)return;const updatedSession={...session,questions:[...session.questions,question],currentQuestionIndex:session.currentQuestionIndex+1,updatedAt:new Date()};set({session:updatedSession});},addAnswer:answer=>{const{session}=get();if(!session)return;const updatedSession={...session,answers:[...session.answers,answer],updatedAt:new Date(),status:'in_progress'};set({session:updatedSession});},updateSessionStatus:status=>{const{session}=get();if(!session)return;const updatedSession={...session,status,updatedAt:new Date(),...(status==='completed'?{completedAt:new Date()}:{})};set({session:updatedSession});},markSessionComplete:()=>{const{session}=get();if(!session)return;const updatedSession={...session,isComplete:true,updatedAt:new Date()};set({session:updatedSession,isStreamingQuestion:false,currentStreamedText:''});// 如果已收到所有答案，自动将会话状态设置为completed\nif(session.answers.length===session.questions.length){get().updateSessionStatus('completed');}},setLoading:isLoading=>{set({isLoading});},setError:error=>{set({error,isLoading:false,isStreamingQuestion:false});if(error){const{session}=get();if(session){get().updateSessionStatus('error');}}},handleStreamEvent:event=>{const{isStreamingQuestion}=get();switch(event.type){case'question':if(!isStreamingQuestion){set({isStreamingQuestion:true,currentStreamedText:''});}set(state=>({currentStreamedText:state.currentStreamedText+event.data}));break;case'completion':// Create a complete question from the streamed text\nif(isStreamingQuestion&&event.id){const newQuestion={id:event.id,text:get().currentStreamedText,type:event.questionType||'open',options:event.options,required:event.required||true};get().addQuestion(newQuestion);set({isStreamingQuestion:false,currentStreamedText:''});}break;case'end':// 处理问题流结束事件\nconsole.log('Received END event, marking session as complete');get().markSessionComplete();break;case'error':get().setError(event.data);break;}},completeSession:()=>{get().updateSessionStatus('completed');set({isStreamingQuestion:false,currentStreamedText:''});}}),{name:'clarification-store'}));","map":{"version":3,"names":["create","devtools","initialState","session","isLoading","error","isStreamingQuestion","currentStreamedText","useClarificationStore","set","get","initSession","planId","newSession","id","Date","now","status","currentQuestionIndex","questions","answers","createdAt","updatedAt","isComplete","resetSession","setCurrentStreamedText","text","setStreamingStatus","isStreaming","addQuestion","question","updatedSession","addAnswer","answer","updateSessionStatus","completedAt","markSessionComplete","length","setLoading","setError","handleStreamEvent","event","type","state","data","newQuestion","questionType","options","required","console","log","completeSession","name"],"sources":["/home/devbox/project/src/features/clarification/store/clarificationStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { \n  ClarificationState, \n  Answer, \n  Question, \n  ClarificationSession,\n  StreamEvent\n} from '../types';\n\ninterface ClarificationActions {\n  // Session actions\n  initSession: (planId?: string) => void;\n  resetSession: () => void;\n  \n  // Question and answer actions\n  setCurrentStreamedText: (text: string) => void;\n  setStreamingStatus: (isStreaming: boolean) => void;\n  addQuestion: (question: Question) => void;\n  addAnswer: (answer: Answer) => void;\n  updateSessionStatus: (status: ClarificationSession['status']) => void;\n  \n  // Loading and error states\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  \n  // Event handling\n  handleStreamEvent: (event: StreamEvent) => void;\n  completeSession: () => void;\n  \n  // 标记问题流结束\n  markSessionComplete: () => void;\n}\n\ntype ClarificationStore = ClarificationState & ClarificationActions;\n\nconst initialState: ClarificationState = {\n  session: null,\n  isLoading: false,\n  error: null,\n  isStreamingQuestion: false,\n  currentStreamedText: '',\n};\n\nexport const useClarificationStore = create<ClarificationStore>()(\n  devtools(\n    (set, get) => ({\n      ...initialState,\n      \n      initSession: (planId) => {\n        const newSession: ClarificationSession = {\n          id: `session-${Date.now()}`,\n          planId,\n          status: 'pending',\n          currentQuestionIndex: -1,\n          questions: [],\n          answers: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          isComplete: false\n        };\n        \n        set({ \n          session: newSession,\n          isLoading: false,\n          error: null,\n          isStreamingQuestion: false,\n          currentStreamedText: '',\n        });\n      },\n      \n      resetSession: () => {\n        set(initialState);\n      },\n      \n      setCurrentStreamedText: (text) => {\n        set({ currentStreamedText: text });\n      },\n      \n      setStreamingStatus: (isStreaming) => {\n        set({ isStreamingQuestion: isStreaming });\n      },\n      \n      addQuestion: (question) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          questions: [...session.questions, question],\n          currentQuestionIndex: session.currentQuestionIndex + 1,\n          updatedAt: new Date(),\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      addAnswer: (answer) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          answers: [...session.answers, answer],\n          updatedAt: new Date(),\n          status: 'in_progress' as const,\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      updateSessionStatus: (status) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          status,\n          updatedAt: new Date(),\n          ...(status === 'completed' ? { completedAt: new Date() } : {}),\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      markSessionComplete: () => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          isComplete: true,\n          updatedAt: new Date(),\n        };\n        \n        set({ \n          session: updatedSession,\n          isStreamingQuestion: false,\n          currentStreamedText: '',\n        });\n        \n        // 如果已收到所有答案，自动将会话状态设置为completed\n        if (session.answers.length === session.questions.length) {\n          get().updateSessionStatus('completed');\n        }\n      },\n      \n      setLoading: (isLoading) => {\n        set({ isLoading });\n      },\n      \n      setError: (error) => {\n        set({ \n          error,\n          isLoading: false,\n          isStreamingQuestion: false\n        });\n        \n        if (error) {\n          const { session } = get();\n          if (session) {\n            get().updateSessionStatus('error');\n          }\n        }\n      },\n      \n      handleStreamEvent: (event) => {\n        const { isStreamingQuestion } = get();\n        \n        switch (event.type) {\n          case 'question':\n            if (!isStreamingQuestion) {\n              set({ isStreamingQuestion: true, currentStreamedText: '' });\n            }\n            \n            set((state) => ({ \n              currentStreamedText: state.currentStreamedText + event.data \n            }));\n            break;\n            \n          case 'completion':\n            // Create a complete question from the streamed text\n            if (isStreamingQuestion && event.id) {\n              const newQuestion: Question = {\n                id: event.id,\n                text: get().currentStreamedText,\n                type: event.questionType || 'open',\n                options: event.options,\n                required: event.required || true,\n              };\n              \n              get().addQuestion(newQuestion);\n              set({ \n                isStreamingQuestion: false,\n                currentStreamedText: ''\n              });\n            }\n            break;\n            \n          case 'end':\n            // 处理问题流结束事件\n            console.log('Received END event, marking session as complete');\n            get().markSessionComplete();\n            break;\n            \n          case 'error':\n            get().setError(event.data);\n            break;\n        }\n      },\n      \n      completeSession: () => {\n        get().updateSessionStatus('completed');\n        set({ \n          isStreamingQuestion: false,\n          currentStreamedText: '',\n        });\n      },\n    }),\n    { name: 'clarification-store' }\n  )\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}