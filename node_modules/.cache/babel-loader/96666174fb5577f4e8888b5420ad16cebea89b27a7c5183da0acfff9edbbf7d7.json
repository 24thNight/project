{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'sonner';\nimport { t } from '../../../lib/i18n';\nimport { mockClarificationApi } from './mock-api';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// 是否使用模拟API - 在以下情况使用模拟:\n// 1. 开发环境 (默认启用)\n// 2. 通过URL参数useMock=true显式启用\n// 3. 可以通过URL参数useMock=false显式禁用\nconst shouldUseMockApi = () => {\n  // 如果不是开发环境，永远不使用模拟\n  if (process.env.NODE_ENV === 'production') {\n    return false;\n  }\n\n  // 检查是否通过URL参数配置\n  if (typeof window !== 'undefined') {\n    const urlParams = new URLSearchParams(window.location.search);\n    const mockParam = urlParams.get('useMock');\n\n    // 如果URL参数明确指定了是否使用模拟\n    if (mockParam !== null) {\n      return mockParam === 'true';\n    }\n  }\n\n  // 检查环境变量配置\n  if (process.env.REACT_APP_USE_MOCK === 'false') {\n    return false;\n  }\n\n  // 开发环境下默认启用模拟\n  return true;\n};\n\n// 用于开发时查看是否使用了模拟API\nif (process.env.NODE_ENV !== 'production') {\n  console.log(`[Clarification API] Using ${shouldUseMockApi() ? 'MOCK' : 'REAL'} API`);\n}\n\n// Create axios instance with the same config as the main API\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Response interface according to project requirements\n\n// Error handling helper\nconst handleApiError = (error, lang = 'en') => {\n  let errorMessage = t('api.errors.default', lang);\n  if (error && error.response) {\n    var _error$response$data;\n    if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    errorMessage = t('api.errors.network', lang);\n  }\n  toast.error(errorMessage);\n  throw error;\n};\nexport const clarificationApi = {\n  // Start a new clarification session\n  startSession: async (planId, lang = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.startSession(planId);\n      } catch (error) {\n        console.error('[Mock API] Error starting session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n\n    // 使用真实API\n    try {\n      const response = await api.post('/clarification/sessions', {\n        planId\n      });\n      return response.data.data.sessionId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // Submit an answer to a question\n  submitAnswer: async (sessionId, answer, lang = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.submitAnswer(sessionId, answer);\n      } catch (error) {\n        console.error('[Mock API] Error submitting answer:', error);\n        return handleApiError(error, lang);\n      }\n    }\n\n    // 使用真实API\n    try {\n      const response = await api.post(`/clarification/sessions/${sessionId}/answers`, {\n        answer\n      });\n      return response.data.data.success;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // Complete the session and generate the plan\n  completeSession: async (sessionId, lang = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.completeSession(sessionId);\n      } catch (error) {\n        console.error('[Mock API] Error completing session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n\n    // 使用真实API\n    try {\n      const response = await api.post(`/clarification/sessions/${sessionId}/complete`);\n      return response.data.data.planId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // Create an SSE connection for streaming questions\n  createQuestionStream: (sessionId, onEvent, onError, lang = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      console.log('[Mock API] Creating mock question stream');\n      return mockClarificationApi.createQuestionStream(sessionId, onEvent, onError);\n    }\n\n    // 使用真实API\n    // Check if EventSource is available\n    if (!window.EventSource) {\n      onError(t('clarify.error.sseError', lang));\n      return {\n        close: () => {}\n      };\n    }\n\n    // Create the SSE connection\n    const eventSource = new EventSource(`${API_BASE_URL}/clarification/sessions/${sessionId}/stream`);\n\n    // Handle events\n    eventSource.onmessage = event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        onEvent(parsedEvent);\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Error parsing SSE event:', err);\n        }\n        onError(t('clarify.error.generic', lang));\n      }\n    };\n\n    // Handle connection open\n    eventSource.onopen = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.log('SSE connection opened');\n      }\n    };\n\n    // Handle errors\n    eventSource.onerror = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('SSE connection error');\n      }\n      onError(t('clarify.error.sseError', lang));\n      eventSource.close();\n    };\n\n    // Return a method to close the connection\n    return {\n      close: () => {\n        if (eventSource) {\n          eventSource.close();\n          if (process.env.NODE_ENV !== 'production') {\n            console.log('SSE connection closed');\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["axios","toast","t","mockClarificationApi","API_BASE_URL","process","env","REACT_APP_API_URL","shouldUseMockApi","NODE_ENV","window","urlParams","URLSearchParams","location","search","mockParam","get","REACT_APP_USE_MOCK","console","log","api","create","baseURL","headers","withCredentials","handleApiError","error","lang","errorMessage","response","_error$response$data","data","message","request","clarificationApi","startSession","planId","post","sessionId","submitAnswer","answer","success","completeSession","createQuestionStream","onEvent","onError","EventSource","close","eventSource","onmessage","event","parsedEvent","JSON","parse","err","onopen","onerror"],"sources":["/home/devbox/project/src/features/clarification/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'sonner';\nimport { t } from '../../../lib/i18n';\nimport { Language } from '../../../lib/i18n';\nimport { Answer, StreamEvent } from '../types';\nimport { mockClarificationApi } from './mock-api';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// 是否使用模拟API - 在以下情况使用模拟:\n// 1. 开发环境 (默认启用)\n// 2. 通过URL参数useMock=true显式启用\n// 3. 可以通过URL参数useMock=false显式禁用\nconst shouldUseMockApi = () => {\n  // 如果不是开发环境，永远不使用模拟\n  if (process.env.NODE_ENV === 'production') {\n    return false;\n  }\n  \n  // 检查是否通过URL参数配置\n  if (typeof window !== 'undefined') {\n    const urlParams = new URLSearchParams(window.location.search);\n    const mockParam = urlParams.get('useMock');\n    \n    // 如果URL参数明确指定了是否使用模拟\n    if (mockParam !== null) {\n      return mockParam === 'true';\n    }\n  }\n  \n  // 检查环境变量配置\n  if (process.env.REACT_APP_USE_MOCK === 'false') {\n    return false;\n  }\n  \n  // 开发环境下默认启用模拟\n  return true;\n};\n\n// 用于开发时查看是否使用了模拟API\nif (process.env.NODE_ENV !== 'production') {\n  console.log(`[Clarification API] Using ${shouldUseMockApi() ? 'MOCK' : 'REAL'} API`);\n}\n\n// Create axios instance with the same config as the main API\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: false,\n});\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any, lang: Language = 'en'): never => {\n  let errorMessage = t('api.errors.default', lang);\n\n  if (error && error.response) {\n    if (error.response.data?.message) {\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    errorMessage = t('api.errors.network', lang);\n  }\n\n  toast.error(errorMessage);\n  throw error;\n};\n\nexport const clarificationApi = {\n  // Start a new clarification session\n  startSession: async (planId?: string, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.startSession(planId);\n      } catch (error) {\n        console.error('[Mock API] Error starting session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ sessionId: string }>>(\n        '/clarification/sessions', \n        { planId }\n      );\n      return response.data.data.sessionId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Submit an answer to a question\n  submitAnswer: async (sessionId: string, answer: Answer, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.submitAnswer(sessionId, answer);\n      } catch (error) {\n        console.error('[Mock API] Error submitting answer:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ success: boolean }>>(\n        `/clarification/sessions/${sessionId}/answers`,\n        { answer }\n      );\n      return response.data.data.success;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Complete the session and generate the plan\n  completeSession: async (sessionId: string, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.completeSession(sessionId);\n      } catch (error) {\n        console.error('[Mock API] Error completing session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ planId: string }>>(\n        `/clarification/sessions/${sessionId}/complete`\n      );\n      return response.data.data.planId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Create an SSE connection for streaming questions\n  createQuestionStream: (\n    sessionId: string, \n    onEvent: (event: StreamEvent) => void,\n    onError: (error: string) => void,\n    lang: Language = 'en'\n  ): { close: () => void } => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      console.log('[Mock API] Creating mock question stream');\n      return mockClarificationApi.createQuestionStream(sessionId, onEvent, onError);\n    }\n    \n    // 使用真实API\n    // Check if EventSource is available\n    if (!window.EventSource) {\n      onError(t('clarify.error.sseError', lang));\n      return { close: () => {} };\n    }\n    \n    // Create the SSE connection\n    const eventSource = new EventSource(\n      `${API_BASE_URL}/clarification/sessions/${sessionId}/stream`\n    );\n    \n    // Handle events\n    eventSource.onmessage = (event) => {\n      try {\n        const parsedEvent: StreamEvent = JSON.parse(event.data);\n        onEvent(parsedEvent);\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Error parsing SSE event:', err);\n        }\n        onError(t('clarify.error.generic', lang));\n      }\n    };\n    \n    // Handle connection open\n    eventSource.onopen = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.log('SSE connection opened');\n      }\n    };\n    \n    // Handle errors\n    eventSource.onerror = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('SSE connection error');\n      }\n      onError(t('clarify.error.sseError', lang));\n      eventSource.close();\n    };\n    \n    // Return a method to close the connection\n    return {\n      close: () => {\n        if (eventSource) {\n          eventSource.close();\n          if (process.env.NODE_ENV !== 'production') {\n            console.log('SSE connection closed');\n          }\n        }\n      }\n    };\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,QAAQ;AAC9B,SAASC,CAAC,QAAQ,mBAAmB;AAGrC,SAASC,oBAAoB,QAAQ,YAAY;;AAEjD;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,qCAAqC;;AAE3F;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC7B;EACA,IAAIH,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;IACzC,OAAO,KAAK;EACd;;EAEA;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACF,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,SAAS,GAAGJ,SAAS,CAACK,GAAG,CAAC,SAAS,CAAC;;IAE1C;IACA,IAAID,SAAS,KAAK,IAAI,EAAE;MACtB,OAAOA,SAAS,KAAK,MAAM;IAC7B;EACF;;EAEA;EACA,IAAIV,OAAO,CAACC,GAAG,CAACW,kBAAkB,KAAK,OAAO,EAAE;IAC9C,OAAO,KAAK;EACd;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,IAAIZ,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;EACzCS,OAAO,CAACC,GAAG,CAAC,6BAA6BX,gBAAgB,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,MAAM,CAAC;AACtF;;AAEA;AACA,MAAMY,GAAG,GAAGpB,KAAK,CAACqB,MAAM,CAAC;EACvBC,OAAO,EAAElB,YAAY;EACrBmB,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;;AAOA;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAU,EAAEC,IAAc,GAAG,IAAI,KAAY;EACnE,IAAIC,YAAY,GAAG1B,CAAC,CAAC,oBAAoB,EAAEyB,IAAI,CAAC;EAEhD,IAAID,KAAK,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAAA,IAAAC,oBAAA;IAC3B,KAAAA,oBAAA,GAAIJ,KAAK,CAACG,QAAQ,CAACE,IAAI,cAAAD,oBAAA,eAAnBA,oBAAA,CAAqBE,OAAO,EAAE;MAChCJ,YAAY,GAAGF,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACC,OAAO;IAC5C;EACF,CAAC,MAAM,IAAIN,KAAK,IAAIA,KAAK,CAACO,OAAO,EAAE;IACjCL,YAAY,GAAG1B,CAAC,CAAC,oBAAoB,EAAEyB,IAAI,CAAC;EAC9C;EAEA1B,KAAK,CAACyB,KAAK,CAACE,YAAY,CAAC;EACzB,MAAMF,KAAK;AACb,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG;EAC9B;EACAC,YAAY,EAAE,MAAAA,CAAOC,MAAe,EAAET,IAAc,GAAG,IAAI,KAAK;IAC9D;IACA,IAAInB,gBAAgB,CAAC,CAAC,EAAE;MACtB,IAAI;QACF,OAAO,MAAML,oBAAoB,CAACgC,YAAY,CAACC,MAAM,CAAC;MACxD,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;MACpC;IACF;;IAEA;IACA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMT,GAAG,CAACiB,IAAI,CAC7B,yBAAyB,EACzB;QAAED;MAAO,CACX,CAAC;MACD,OAAOP,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACO,SAAS;IACrC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACd,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;IACpC;EACF,CAAC;EAED;EACAY,YAAY,EAAE,MAAAA,CAAOD,SAAiB,EAAEE,MAAc,EAAEb,IAAc,GAAG,IAAI,KAAK;IAChF;IACA,IAAInB,gBAAgB,CAAC,CAAC,EAAE;MACtB,IAAI;QACF,OAAO,MAAML,oBAAoB,CAACoC,YAAY,CAACD,SAAS,EAAEE,MAAM,CAAC;MACnE,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3D,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;MACpC;IACF;;IAEA;IACA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMT,GAAG,CAACiB,IAAI,CAC7B,2BAA2BC,SAAS,UAAU,EAC9C;QAAEE;MAAO,CACX,CAAC;MACD,OAAOX,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACU,OAAO;IACnC,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;IACpC;EACF,CAAC;EAED;EACAe,eAAe,EAAE,MAAAA,CAAOJ,SAAiB,EAAEX,IAAc,GAAG,IAAI,KAAK;IACnE;IACA,IAAInB,gBAAgB,CAAC,CAAC,EAAE;MACtB,IAAI;QACF,OAAO,MAAML,oBAAoB,CAACuC,eAAe,CAACJ,SAAS,CAAC;MAC9D,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;MACpC;IACF;;IAEA;IACA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMT,GAAG,CAACiB,IAAI,CAC7B,2BAA2BC,SAAS,WACtC,CAAC;MACD,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACK,MAAM;IAClC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd,OAAOD,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;IACpC;EACF,CAAC;EAED;EACAgB,oBAAoB,EAAEA,CACpBL,SAAiB,EACjBM,OAAqC,EACrCC,OAAgC,EAChClB,IAAc,GAAG,IAAI,KACK;IAC1B;IACA,IAAInB,gBAAgB,CAAC,CAAC,EAAE;MACtBU,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,OAAOhB,oBAAoB,CAACwC,oBAAoB,CAACL,SAAS,EAAEM,OAAO,EAAEC,OAAO,CAAC;IAC/E;;IAEA;IACA;IACA,IAAI,CAACnC,MAAM,CAACoC,WAAW,EAAE;MACvBD,OAAO,CAAC3C,CAAC,CAAC,wBAAwB,EAAEyB,IAAI,CAAC,CAAC;MAC1C,OAAO;QAAEoB,KAAK,EAAEA,CAAA,KAAM,CAAC;MAAE,CAAC;IAC5B;;IAEA;IACA,MAAMC,WAAW,GAAG,IAAIF,WAAW,CACjC,GAAG1C,YAAY,2BAA2BkC,SAAS,SACrD,CAAC;;IAED;IACAU,WAAW,CAACC,SAAS,GAAIC,KAAK,IAAK;MACjC,IAAI;QACF,MAAMC,WAAwB,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACnB,IAAI,CAAC;QACvDa,OAAO,CAACO,WAAW,CAAC;MACtB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZ,IAAIjD,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;UACzCS,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAE4B,GAAG,CAAC;QAChD;QACAT,OAAO,CAAC3C,CAAC,CAAC,uBAAuB,EAAEyB,IAAI,CAAC,CAAC;MAC3C;IACF,CAAC;;IAED;IACAqB,WAAW,CAACO,MAAM,GAAG,MAAM;MACzB,IAAIlD,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;QACzCS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC;IACF,CAAC;;IAED;IACA6B,WAAW,CAACQ,OAAO,GAAG,MAAM;MAC1B,IAAInD,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;QACzCS,OAAO,CAACQ,KAAK,CAAC,sBAAsB,CAAC;MACvC;MACAmB,OAAO,CAAC3C,CAAC,CAAC,wBAAwB,EAAEyB,IAAI,CAAC,CAAC;MAC1CqB,WAAW,CAACD,KAAK,CAAC,CAAC;IACrB,CAAC;;IAED;IACA,OAAO;MACLA,KAAK,EAAEA,CAAA,KAAM;QACX,IAAIC,WAAW,EAAE;UACfA,WAAW,CAACD,KAAK,CAAC,CAAC;UACnB,IAAI1C,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;YACzCS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACtC;QACF;MACF;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}