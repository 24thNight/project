{"ast":null,"code":"import { create } from 'zustand';\nimport { mockPlans } from '../types/task';\nexport const usePlanStore = create((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  fetchPlans: () => {\n    set({\n      isLoading: true\n    });\n    // Simulating API call with mock data\n    setTimeout(() => {\n      set({\n        plans: mockPlans,\n        isLoading: false\n      });\n    }, 500);\n  },\n  getPlanById: id => {\n    return get().plans.find(plan => plan.id === id);\n  },\n  setFocusPlan: id => {\n    set({\n      focusPlanId: id\n    });\n  },\n  addPlan: plan => {\n    set(state => ({\n      plans: [...state.plans, plan]\n    }));\n  },\n  updatePlan: (id, updates) => {\n    set(state => ({\n      plans: state.plans.map(plan => plan.id === id ? {\n        ...plan,\n        ...updates\n      } : plan)\n    }));\n  },\n  deletePlan: id => {\n    set(state => ({\n      plans: state.plans.map(plan => plan.id === id ? {\n        ...plan,\n        status: 'deleted'\n      } : plan)\n    }));\n  },\n  getCurrentStage: planId => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    return {\n      stage,\n      plan\n    };\n  }\n}));","map":{"version":3,"names":["create","mockPlans","usePlanStore","set","get","plans","focusPlanId","isLoading","error","fetchPlans","setTimeout","getPlanById","id","find","plan","setFocusPlan","addPlan","state","updatePlan","updates","map","deletePlan","status","getCurrentStage","planId","p","stage","stages","s","currentStageId"],"sources":["/home/devbox/project/src/lib/store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Plan, mockPlans } from '../types/task';\n\ninterface PlanState {\n  plans: Plan[];\n  focusPlanId: string | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  fetchPlans: () => void;\n  getPlanById: (id: string) => Plan | undefined;\n  setFocusPlan: (id: string | null) => void;\n  addPlan: (plan: Plan) => void;\n  updatePlan: (id: string, updates: Partial<Plan>) => void;\n  deletePlan: (id: string) => void;\n  getCurrentStage: (planId: string) => { stage: any, plan: Plan } | null;\n}\n\nexport const usePlanStore = create<PlanState>((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n\n  fetchPlans: () => {\n    set({ isLoading: true });\n    // Simulating API call with mock data\n    setTimeout(() => {\n      set({ plans: mockPlans, isLoading: false });\n    }, 500);\n  },\n\n  getPlanById: (id: string) => {\n    return get().plans.find(plan => plan.id === id);\n  },\n\n  setFocusPlan: (id: string | null) => {\n    set({ focusPlanId: id });\n  },\n\n  addPlan: (plan: Plan) => {\n    set(state => ({ plans: [...state.plans, plan] }));\n  },\n\n  updatePlan: (id: string, updates: Partial<Plan>) => {\n    set(state => ({\n      plans: state.plans.map(plan => \n        plan.id === id ? { ...plan, ...updates } : plan\n      )\n    }));\n  },\n\n  deletePlan: (id: string) => {\n    set(state => ({\n      plans: state.plans.map(plan => \n        plan.id === id \n          ? { ...plan, status: 'deleted' as const } \n          : plan\n      )\n    }));\n  },\n\n  getCurrentStage: (planId: string) => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    \n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    \n    return { stage, plan };\n  }\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAAeC,SAAS,QAAQ,eAAe;AAkB/C,OAAO,MAAMC,YAAY,GAAGF,MAAM,CAAY,CAACG,GAAG,EAAEC,GAAG,MAAM;EAC3DC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEXC,UAAU,EAAEA,CAAA,KAAM;IAChBN,GAAG,CAAC;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB;IACAG,UAAU,CAAC,MAAM;MACfP,GAAG,CAAC;QAAEE,KAAK,EAAEJ,SAAS;QAAEM,SAAS,EAAE;MAAM,CAAC,CAAC;IAC7C,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAEDI,WAAW,EAAGC,EAAU,IAAK;IAC3B,OAAOR,GAAG,CAAC,CAAC,CAACC,KAAK,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;EACjD,CAAC;EAEDG,YAAY,EAAGH,EAAiB,IAAK;IACnCT,GAAG,CAAC;MAAEG,WAAW,EAAEM;IAAG,CAAC,CAAC;EAC1B,CAAC;EAEDI,OAAO,EAAGF,IAAU,IAAK;IACvBX,GAAG,CAACc,KAAK,KAAK;MAAEZ,KAAK,EAAE,CAAC,GAAGY,KAAK,CAACZ,KAAK,EAAES,IAAI;IAAE,CAAC,CAAC,CAAC;EACnD,CAAC;EAEDI,UAAU,EAAEA,CAACN,EAAU,EAAEO,OAAsB,KAAK;IAClDhB,GAAG,CAACc,KAAK,KAAK;MACZZ,KAAK,EAAEY,KAAK,CAACZ,KAAK,CAACe,GAAG,CAACN,IAAI,IACzBA,IAAI,CAACF,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGE,IAAI;QAAE,GAAGK;MAAQ,CAAC,GAAGL,IAC7C;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDO,UAAU,EAAGT,EAAU,IAAK;IAC1BT,GAAG,CAACc,KAAK,KAAK;MACZZ,KAAK,EAAEY,KAAK,CAACZ,KAAK,CAACe,GAAG,CAACN,IAAI,IACzBA,IAAI,CAACF,EAAE,KAAKA,EAAE,GACV;QAAE,GAAGE,IAAI;QAAEQ,MAAM,EAAE;MAAmB,CAAC,GACvCR,IACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDS,eAAe,EAAGC,MAAc,IAAK;IACnC,MAAMV,IAAI,GAAGV,GAAG,CAAC,CAAC,CAACC,KAAK,CAACQ,IAAI,CAACY,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKY,MAAM,CAAC;IACnD,IAAI,CAACV,IAAI,EAAE,OAAO,IAAI;IAEtB,MAAMY,KAAK,GAAGZ,IAAI,CAACa,MAAM,CAACd,IAAI,CAACe,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKE,IAAI,CAACe,cAAc,CAAC;IACjE,IAAI,CAACH,KAAK,EAAE,OAAO,IAAI;IAEvB,OAAO;MAAEA,KAAK;MAAEZ;IAAK,CAAC;EACxB;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}