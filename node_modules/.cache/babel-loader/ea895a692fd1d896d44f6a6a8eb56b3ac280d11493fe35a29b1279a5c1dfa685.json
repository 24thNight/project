{"ast":null,"code":"import React,{useEffect,useState,useRef,useCallback}from'react';import{useNavigate,useSearchParams}from'react-router-dom';import{useLanguage}from'../lib/language-context';import{toast}from'sonner';// Assume API base URL is configured elsewhere or use environment variable\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Adjust if needed\n// 日志辅助函数，仅在开发环境输出\nconst devLog=function(message){if(process.env.NODE_ENV!=='production'){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log(message,...args);}};// 错误日志辅助函数，仅在开发环境输出\nconst devError=function(message){if(process.env.NODE_ENV!=='production'){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}console.error(message,...args);}};const ClarifyPage=()=>{devLog(\"[ClarifyPage] Component mounted.\");const{t}=useLanguage();const navigate=useNavigate();const[searchParams]=useSearchParams();const[taskTitle,setTaskTitle]=useState('');const[questions,setQuestions]=useState([]);const[answers,setAnswers]=useState({});// Store answers by index\nconst[currentIndex,setCurrentIndex]=useState(0);// Index of the question being currently asked/answered\nconst[currentInput,setCurrentInput]=useState('');const[isLoading,setIsLoading]=useState(true);// Loading state for initial questions\nconst[isEnded,setIsEnded]=useState(false);// Flag for receiving [END]\nconst eventSourceRef=useRef(null);const inputRef=useRef(null);// Ref for focusing input\n// Effect for Initialization (Fetch title, POST, SSE)\nuseEffect(()=>{const title=searchParams.get('taskTitle');if(!title){toast.error(t('clarify.error.missingTitle'));navigate('/dashboard');return;}const decodedTitle=decodeURIComponent(title);setTaskTitle(decodedTitle);setIsLoading(true);// 创建清理函数，确保在任何情况下都能关闭SSE连接\nconst cleanupSSE=()=>{if(eventSourceRef.current){devLog('[ClarifyPage] Cleaning up SSE connection');eventSourceRef.current.close();eventSourceRef.current=null;}};// Function to start the process\nconst startClarification=async()=>{try{// Close previous connection if exists before starting a new one\ncleanupSSE();// 1. Send POST request to start backend process\ndevLog('[ClarifyPage] Sending POST /api/clarify/start');const postResponse=await fetch(`${API_BASE_URL}/api/clarify/start`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({taskTitle:decodedTitle})});if(!postResponse.ok){devError('POST request failed:',postResponse.statusText);toast.error(t('clarify.error.startFailed'));// Decide if we should still try to connect to SSE or redirect\n// For mock, we can continue to SSE\n// navigate('/dashboard');\n// return;\n}devLog('[ClarifyPage] POST request successful');// 2. Establish SSE connection\ndevLog(`[ClarifyPage] Establishing SSE connection to /api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);const es=new EventSource(`${API_BASE_URL}/api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);eventSourceRef.current=es;es.onopen=()=>{devLog('[ClarifyPage] SSE Connection Opened');setIsLoading(false);// Stop loading once connection is open\n};es.onmessage=event=>{devLog('[ClarifyPage] SSE Message Received:',event.data);if(event.data==='[END]'){devLog('[ClarifyPage] SSE Received [END] marker');setIsEnded(true);cleanupSSE();// 使用统一的清理函数\n}else{// Add new question\nsetQuestions(prev=>[...prev,event.data]);}};es.onerror=error=>{devError('[ClarifyPage] SSE Error:',error);toast.error(t('clarify.error.sseError'));setIsLoading(false);setIsEnded(true);// Assume ended on error to prevent getting stuck\ncleanupSSE();// 使用统一的清理函数\n};}catch(error){devError('[ClarifyPage] Error during clarification start:',error);toast.error(t('clarify.error.generic'));setIsLoading(false);// Maybe navigate back or show error state\nnavigate('/dashboard');}};startClarification();// 组件卸载时清理\nreturn cleanupSSE;},[searchParams,navigate,t]);// Effect for Navigation when finished\nuseEffect(()=>{// Check if all received questions have been answered AND the [END] marker was received\nif(isEnded&&questions.length>0&&currentIndex===questions.length){devLog('[ClarifyPage] All questions answered and END received. Navigating to /plan...');// Convert answers record to simple array in order\nconst finalAnswers=questions.map((_,index)=>answers[index]||'');// Get answer or empty string\n// Short delay before navigation\nconst timer=setTimeout(()=>{navigate('/plan',{state:{taskTitle,answers:finalAnswers,questions}});},300);// 减少延迟时间\nreturn()=>clearTimeout(timer);}},[currentIndex,questions,answers,isEnded,taskTitle,navigate]);// Effect to focus input when current question changes\nuseEffect(()=>{if(currentIndex<questions.length&&!isEnded){var _inputRef$current;(_inputRef$current=inputRef.current)===null||_inputRef$current===void 0?void 0:_inputRef$current.focus();}},[currentIndex,questions.length,isEnded]);// Handle answer submission\nconst handleSubmitAnswer=useCallback(()=>{if(currentInput.trim()===''||currentIndex>=questions.length)return;devLog(`[ClarifyPage] Submitting answer for index ${currentIndex}:`,currentInput.trim());setAnswers(prev=>({...prev,[currentIndex]:currentInput.trim()}));setCurrentInput('');setCurrentIndex(prev=>prev+1);},[currentInput,currentIndex,questions.length]);// Handle input keydown (Enter)\nconst handleKeyDown=e=>{if(e.key==='Enter'){e.preventDefault();handleSubmitAnswer();}};// 处理返回Dashboard\nconst handleBackToDashboard=()=>{navigate('/dashboard');};return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gray-50 flex items-center justify-center p-4 md:p-6 zen-bg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-2xl w-full bg-white rounded-xl shadow-lg p-6 md:p-10 space-y-6 md:space-y-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center border-b pb-4 mb-4\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500 mb-1\",children:t('clarify.yourGoal')}),/*#__PURE__*/_jsx(\"h1\",{className:\"text-xl md:text-2xl font-semibold text-gray-800\",children:taskTitle})]}),isLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center justify-center py-8 text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:t('clarify.loadingQuestions')})]}),!isLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[questions.map((question,index)=>// Only render answered questions and the current one\nindex<=currentIndex&&/*#__PURE__*/_jsx(\"div\",{className:\"overflow-hidden\",children:/*#__PURE__*/_jsxs(\"div\",{className:`p-4 rounded-lg ${index<currentIndex?'bg-gray-50':'bg-indigo-50 border border-indigo-100'}`,children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-800 mb-3\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"font-medium\",children:[\"Q\",index+1,\":\"]}),\" \",question]}),index<currentIndex&&answers[index]&&/*#__PURE__*/_jsx(\"div\",{className:\"ml-4 pl-3 border-l-2 border-indigo-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-indigo-700 italic\",children:answers[index]})}),index===currentIndex&&!isEnded&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-3 ml-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(\"input\",{ref:inputRef,type:\"text\",value:currentInput,onChange:e=>setCurrentInput(e.target.value),onKeyDown:handleKeyDown,placeholder:t('clarify.answerPlaceholder'),className:\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\",disabled:currentIndex!==index||isEnded// Disable if not current or ended\n,\"aria-label\":`Answer to question ${index+1}`}),/*#__PURE__*/_jsx(\"div\",{className:\"absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400 pointer-events-none\",children:t('clarify.enterToSubmit')})]})})]})},index)),currentIndex<questions.length&&!isEnded&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center text-gray-500 pt-4\",children:t('clarify.waitingNext')}),isEnded&&currentIndex===questions.length&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center text-indigo-600 font-medium pt-4\",children:t('clarify.allQuestionsAnswered')})]})]})});};export default ClarifyPage;","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useNavigate","useSearchParams","useLanguage","toast","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","process","env","REACT_APP_API_URL","devLog","message","NODE_ENV","_len","arguments","length","args","Array","_key","console","log","devError","_len2","_key2","error","ClarifyPage","t","navigate","searchParams","taskTitle","setTaskTitle","questions","setQuestions","answers","setAnswers","currentIndex","setCurrentIndex","currentInput","setCurrentInput","isLoading","setIsLoading","isEnded","setIsEnded","eventSourceRef","inputRef","title","get","decodedTitle","decodeURIComponent","cleanupSSE","current","close","startClarification","postResponse","fetch","method","headers","body","JSON","stringify","ok","statusText","encodeURIComponent","es","EventSource","onopen","onmessage","event","data","prev","onerror","finalAnswers","map","_","index","timer","setTimeout","state","clearTimeout","_inputRef$current","focus","handleSubmitAnswer","trim","handleKeyDown","e","key","preventDefault","handleBackToDashboard","className","children","question","ref","type","value","onChange","target","onKeyDown","placeholder","disabled"],"sources":["/home/devbox/project/src/pages/clarify-page.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useLanguage } from '../lib/language-context';\nimport { Button } from '../components/ui/button';\nimport { toast } from 'sonner';\n\n// Assume API base URL is configured elsewhere or use environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000'; // Adjust if needed\n\n// 日志辅助函数，仅在开发环境输出\nconst devLog = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(message, ...args);\n  }\n};\n\n// 错误日志辅助函数，仅在开发环境输出\nconst devError = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(message, ...args);\n  }\n};\n\ninterface ClarifyPageState {\n  taskTitle: string;\n  questions: string[];\n  answers: string[];\n}\n\nconst ClarifyPage: React.FC = () => {\n  devLog(\"[ClarifyPage] Component mounted.\");\n  const { t } = useLanguage();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const [taskTitle, setTaskTitle] = useState<string>('');\n  const [questions, setQuestions] = useState<string[]>([]);\n  const [answers, setAnswers] = useState<Record<number, string>>({}); // Store answers by index\n  const [currentIndex, setCurrentIndex] = useState(0); // Index of the question being currently asked/answered\n  const [currentInput, setCurrentInput] = useState('');\n  const [isLoading, setIsLoading] = useState(true); // Loading state for initial questions\n  const [isEnded, setIsEnded] = useState(false); // Flag for receiving [END]\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null); // Ref for focusing input\n\n  // Effect for Initialization (Fetch title, POST, SSE)\n  useEffect(() => {\n    const title = searchParams.get('taskTitle');\n    if (!title) {\n      toast.error(t('clarify.error.missingTitle'));\n      navigate('/dashboard');\n      return;\n    }\n\n    const decodedTitle = decodeURIComponent(title);\n    setTaskTitle(decodedTitle);\n    setIsLoading(true);\n\n    // 创建清理函数，确保在任何情况下都能关闭SSE连接\n    const cleanupSSE = () => {\n      if (eventSourceRef.current) {\n        devLog('[ClarifyPage] Cleaning up SSE connection');\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n\n    // Function to start the process\n    const startClarification = async () => {\n      try {\n        // Close previous connection if exists before starting a new one\n        cleanupSSE();\n\n        // 1. Send POST request to start backend process\n        devLog('[ClarifyPage] Sending POST /api/clarify/start');\n        const postResponse = await fetch(`${API_BASE_URL}/api/clarify/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ taskTitle: decodedTitle }),\n        });\n\n        if (!postResponse.ok) {\n          devError('POST request failed:', postResponse.statusText);\n          toast.error(t('clarify.error.startFailed'));\n          // Decide if we should still try to connect to SSE or redirect\n          // For mock, we can continue to SSE\n          // navigate('/dashboard');\n          // return;\n        }\n        devLog('[ClarifyPage] POST request successful');\n\n        // 2. Establish SSE connection\n        devLog(`[ClarifyPage] Establishing SSE connection to /api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        const es = new EventSource(`${API_BASE_URL}/api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        eventSourceRef.current = es;\n\n        es.onopen = () => {\n          devLog('[ClarifyPage] SSE Connection Opened');\n          setIsLoading(false); // Stop loading once connection is open\n        };\n\n        es.onmessage = (event) => {\n          devLog('[ClarifyPage] SSE Message Received:', event.data);\n          if (event.data === '[END]') {\n            devLog('[ClarifyPage] SSE Received [END] marker');\n            setIsEnded(true);\n            cleanupSSE(); // 使用统一的清理函数\n          } else {\n            // Add new question\n            setQuestions(prev => [...prev, event.data]);\n          }\n        };\n\n        es.onerror = (error) => {\n          devError('[ClarifyPage] SSE Error:', error);\n          toast.error(t('clarify.error.sseError'));\n          setIsLoading(false);\n          setIsEnded(true); // Assume ended on error to prevent getting stuck\n          cleanupSSE(); // 使用统一的清理函数\n        };\n\n      } catch (error) {\n        devError('[ClarifyPage] Error during clarification start:', error);\n        toast.error(t('clarify.error.generic'));\n        setIsLoading(false);\n        // Maybe navigate back or show error state\n        navigate('/dashboard');\n      }\n    };\n\n    startClarification();\n\n    // 组件卸载时清理\n    return cleanupSSE;\n  }, [searchParams, navigate, t]);\n\n  // Effect for Navigation when finished\n  useEffect(() => {\n    // Check if all received questions have been answered AND the [END] marker was received\n    if (isEnded && questions.length > 0 && currentIndex === questions.length) {\n      devLog('[ClarifyPage] All questions answered and END received. Navigating to /plan...');\n      // Convert answers record to simple array in order\n      const finalAnswers = questions.map((_, index) => answers[index] || ''); // Get answer or empty string\n\n      // Short delay before navigation\n      const timer = setTimeout(() => {\n        navigate('/plan', {\n          state: { taskTitle, answers: finalAnswers, questions } as ClarifyPageState\n        });\n      }, 300); // 减少延迟时间\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, questions, answers, isEnded, taskTitle, navigate]);\n\n  // Effect to focus input when current question changes\n  useEffect(() => {\n    if (currentIndex < questions.length && !isEnded) {\n      inputRef.current?.focus();\n    }\n  }, [currentIndex, questions.length, isEnded]);\n\n  // Handle answer submission\n  const handleSubmitAnswer = useCallback(() => {\n    if (currentInput.trim() === '' || currentIndex >= questions.length) return;\n\n    devLog(`[ClarifyPage] Submitting answer for index ${currentIndex}:`, currentInput.trim());\n    setAnswers(prev => ({ ...prev, [currentIndex]: currentInput.trim() }));\n    setCurrentInput('');\n    setCurrentIndex(prev => prev + 1);\n  }, [currentInput, currentIndex, questions.length]);\n\n  // Handle input keydown (Enter)\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSubmitAnswer();\n    }\n  };\n\n  // 处理返回Dashboard\n  const handleBackToDashboard = () => {\n    navigate('/dashboard');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4 md:p-6 zen-bg\">\n      <div className=\"max-w-2xl w-full bg-white rounded-xl shadow-lg p-6 md:p-10 space-y-6 md:space-y-8\">\n        {/* Task Title Display */}\n        <div className=\"text-center border-b pb-4 mb-4\">\n          <p className=\"text-sm text-gray-500 mb-1\">{t('clarify.yourGoal')}</p>\n          <h1 className=\"text-xl md:text-2xl font-semibold text-gray-800\">{taskTitle}</h1>\n        </div>\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <div className=\"rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4\"></div>\n            <p className=\"text-gray-600\">{t('clarify.loadingQuestions')}</p>\n          </div>\n        )}\n\n        {/* Q&A Area */}\n        {!isLoading && (\n          <div className=\"space-y-6\">\n            {questions.map((question, index) => (\n              // Only render answered questions and the current one\n              index <= currentIndex && (\n                <div key={index} className=\"overflow-hidden\">\n                  <div className={`p-4 rounded-lg ${index < currentIndex ? 'bg-gray-50' : 'bg-indigo-50 border border-indigo-100'}`}>\n                    {/* Question */}\n                    <p className=\"text-gray-800 mb-3\">\n                      <span className=\"font-medium\">Q{index + 1}:</span> {question}\n                    </p>\n\n                    {/* Answer Display (for answered questions) */}\n                    {index < currentIndex && answers[index] && (\n                      <div className=\"ml-4 pl-3 border-l-2 border-indigo-200\">\n                        <p className=\"text-indigo-700 italic\">{answers[index]}</p>\n                      </div>\n                    )}\n\n                    {/* Input Box (for current question) */}\n                    {index === currentIndex && !isEnded && (\n                      <div className=\"mt-3 ml-4\">\n                        <div className=\"relative\">\n                          <input\n                            ref={inputRef}\n                            type=\"text\"\n                            value={currentInput}\n                            onChange={(e) => setCurrentInput(e.target.value)}\n                            onKeyDown={handleKeyDown}\n                            placeholder={t('clarify.answerPlaceholder')}\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\n                            disabled={currentIndex !== index || isEnded} // Disable if not current or ended\n                            aria-label={`Answer to question ${index + 1}`}\n                          />\n                          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400 pointer-events-none\">\n                            {t('clarify.enterToSubmit')}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )\n            ))}\n\n            {/* Waiting/Completion Message */}\n            {currentIndex < questions.length && !isEnded && (\n              <div className=\"text-center text-gray-500 pt-4\">\n                {t('clarify.waitingNext')}\n              </div>\n            )}\n            {isEnded && currentIndex === questions.length && (\n              <div className=\"text-center text-indigo-600 font-medium pt-4\">\n                {t('clarify.allQuestionsAnswered')}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* No explicit buttons as per requirement */}\n\n      </div>\n    </div>\n  );\n};\n\nexport default ClarifyPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}