{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'sonner';\nimport { t } from './i18n';\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.example.com';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Response interface according to project requirements\n\n// Error handling helper\nconst handleApiError = (error, lang = 'en') => {\n  // 从错误响应中获取消息，或使用默认错误消息\n  let errorMessage = t('api.errors.default', lang);\n\n  // Check if it's an axios error by checking for response property\n  if (error && error.response) {\n    var _error$response$data;\n    if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n      // 使用服务器返回的错误消息\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    // 网络错误 - 请求发出但没有收到响应\n    errorMessage = t('api.errors.network', lang);\n  }\n  toast.error(errorMessage);\n  throw error;\n};\n\n/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */\nconst handleSuccess = (action, lang = 'en') => {\n  toast.success(t(`api.success.${action}`, lang));\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(lang = 'en') {\n    try {\n      const response = await api.get('/plans');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 获取单个计划详情\n  async getPlanById(id, lang = 'en') {\n    try {\n      const response = await api.get(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 创建新计划\n  async createPlan(plan, lang = 'en') {\n    try {\n      const response = await api.post('/plans', plan);\n      handleSuccess('create', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 更新计划\n  async updatePlan(id, updates, lang = 'en') {\n    try {\n      const response = await api.put(`/plans/${id}`, updates);\n      handleSuccess('update', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 重命名计划\n  async renamePlan(id, newTitle, lang = 'en') {\n    try {\n      const response = await api.patch(`/plans/${id}/rename`, {\n        title: newTitle\n      });\n      handleSuccess('rename', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 删除计划（软删除）\n  async deletePlan(id, lang = 'en') {\n    try {\n      await api.delete(`/plans/${id}`);\n      handleSuccess('delete', lang);\n    } catch (error) {\n      handleApiError(error, lang);\n    }\n  },\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId, lang = 'en') {\n    try {\n      const response = await api.get(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  }\n};","map":{"version":3,"names":["axios","toast","t","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","handleApiError","error","lang","errorMessage","response","_error$response$data","data","message","request","handleSuccess","action","success","planApi","fetchPlans","get","getPlanById","id","createPlan","plan","post","updatePlan","updates","put","renamePlan","newTitle","patch","title","deletePlan","delete","getPlanCurrentStage","planId"],"sources":["/home/devbox/project/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Plan } from '../types/task';\nimport { toast } from 'sonner';\nimport { t } from './i18n';\nimport { Language } from './i18n';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.example.com';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any, lang: Language = 'en'): never => {\n  // 从错误响应中获取消息，或使用默认错误消息\n  let errorMessage = t('api.errors.default', lang);\n\n  // Check if it's an axios error by checking for response property\n  if (error && error.response) {\n    if (error.response.data?.message) {\n      // 使用服务器返回的错误消息\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    // 网络错误 - 请求发出但没有收到响应\n    errorMessage = t('api.errors.network', lang);\n  }\n\n  toast.error(errorMessage);\n  throw error;\n};\n\n/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */\nconst handleSuccess = (action: 'create' | 'update' | 'delete' | 'rename', lang: Language = 'en') => {\n  toast.success(t(`api.success.${action}`, lang));\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(lang: Language = 'en'): Promise<Plan[]> {\n    try {\n      const response = await api.get<ApiResponse<Plan[]>>('/plans');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 获取单个计划详情\n  async getPlanById(id: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.get<ApiResponse<Plan>>(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 创建新计划\n  async createPlan(plan: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.post<ApiResponse<Plan>>('/plans', plan);\n      handleSuccess('create', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 更新计划\n  async updatePlan(id: string, updates: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.put<ApiResponse<Plan>>(`/plans/${id}`, updates);\n      handleSuccess('update', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 重命名计划\n  async renamePlan(id: string, newTitle: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.patch<ApiResponse<Plan>>(`/plans/${id}/rename`, { title: newTitle });\n      handleSuccess('rename', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 删除计划（软删除）\n  async deletePlan(id: string, lang: Language = 'en'): Promise<void> {\n    try {\n      await api.delete<ApiResponse<null>>(`/plans/${id}`);\n      handleSuccess('delete', lang);\n    } catch (error) {\n      handleApiError(error, lang);\n    }\n  },\n\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId: string, lang: Language = 'en'): Promise<any> {\n    try {\n      const response = await api.get<ApiResponse<any>>(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}