{"ast":null,"code":"import { create } from 'zustand';\nimport { mockPlans } from '../types/task';\nimport { planApi } from './api';\nexport const usePlanStore = create((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  fetchPlans: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 使用API从后端获取计划列表\n      const plans = await planApi.fetchPlans();\n      set({\n        plans,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error('Failed to fetch plans:', error);\n      set({\n        error: error instanceof Error ? error.message : '获取计划失败',\n        isLoading: false,\n        // 如果API失败，使用mock数据作为后备\n        plans: mockPlans\n      });\n    }\n  },\n  getPlanById: id => {\n    return get().plans.find(plan => plan.id === id);\n  },\n  setFocusPlan: id => {\n    set({\n      focusPlanId: id\n    });\n  },\n  addPlan: async planData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API创建新计划\n      const newPlan = await planApi.createPlan(planData);\n      set(state => ({\n        plans: [...state.plans, newPlan],\n        isLoading: false\n      }));\n      return newPlan.id;\n    } catch (error) {\n      console.error('Failed to add plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '创建计划失败',\n        isLoading: false\n      });\n\n      // 回退到本地创建 (不依赖后端)\n      const id = `plan-${Date.now()}`;\n      const defaultStageId = `stage-${Date.now()}`;\n      const newPlan = {\n        id,\n        title: planData.title || \"新建计划\",\n        description: planData.description || \"\",\n        currentStageId: defaultStageId,\n        stages: [{\n          id: defaultStageId,\n          title: \"第一阶段\",\n          completed: false,\n          tasks: []\n        }],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: \"ongoing\",\n        progress: 0,\n        ...planData\n      };\n      set(state => ({\n        plans: [...state.plans, newPlan]\n      }));\n      return id;\n    }\n  },\n  updatePlan: async (id, updates) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API更新计划\n      await planApi.updatePlan(id, updates);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          ...updates,\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '更新计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          ...updates,\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  renamePlan: async (id, newTitle) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API重命名计划\n      await planApi.renamePlan(id, newTitle);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          title: newTitle,\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to rename plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '重命名计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          title: newTitle,\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  deletePlan: async id => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API删除计划（软删除）\n      await planApi.deletePlan(id);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          status: 'deleted',\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to delete plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '删除计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          status: 'deleted',\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  getCurrentStage: planId => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    return {\n      stage,\n      plan\n    };\n  }\n}));","map":{"version":3,"names":["create","mockPlans","planApi","usePlanStore","set","get","plans","focusPlanId","isLoading","error","fetchPlans","console","Error","message","getPlanById","id","find","plan","setFocusPlan","addPlan","planData","newPlan","createPlan","state","Date","now","defaultStageId","title","description","currentStageId","stages","completed","tasks","createdAt","updatedAt","status","progress","updatePlan","updates","map","renamePlan","newTitle","deletePlan","getCurrentStage","planId","p","stage","s"],"sources":["/home/devbox/project/src/lib/store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Plan, mockPlans } from '../types/task';\nimport { planApi } from './api';\n\ninterface PlanState {\n  plans: Plan[];\n  focusPlanId: string | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  fetchPlans: () => Promise<void>;\n  getPlanById: (id: string) => Plan | undefined;\n  setFocusPlan: (id: string | null) => void;\n  addPlan: (plan: Partial<Plan>) => Promise<string>;\n  updatePlan: (id: string, updates: Partial<Plan>) => Promise<void>;\n  renamePlan: (id: string, newTitle: string) => Promise<void>;\n  deletePlan: (id: string) => Promise<void>;\n  getCurrentStage: (planId: string) => { stage: any, plan: Plan } | null;\n}\n\nexport const usePlanStore = create<PlanState>((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n\n  fetchPlans: async () => {\n    set({ isLoading: true, error: null });\n    try {\n      // 使用API从后端获取计划列表\n      const plans = await planApi.fetchPlans();\n      set({ plans, isLoading: false });\n    } catch (error) {\n      console.error('Failed to fetch plans:', error);\n      set({ \n        error: error instanceof Error ? error.message : '获取计划失败', \n        isLoading: false,\n        // 如果API失败，使用mock数据作为后备\n        plans: mockPlans\n      });\n    }\n  },\n\n  getPlanById: (id: string) => {\n    return get().plans.find(plan => plan.id === id);\n  },\n\n  setFocusPlan: (id: string | null) => {\n    set({ focusPlanId: id });\n  },\n\n  addPlan: async (planData: Partial<Plan>) => {\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API创建新计划\n      const newPlan = await planApi.createPlan(planData);\n      set(state => ({ \n        plans: [...state.plans, newPlan],\n        isLoading: false \n      }));\n      return newPlan.id;\n    } catch (error) {\n      console.error('Failed to add plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '创建计划失败',\n        isLoading: false \n      });\n      \n      // 回退到本地创建 (不依赖后端)\n      const id = `plan-${Date.now()}`;\n      const defaultStageId = `stage-${Date.now()}`;\n      \n      const newPlan: Plan = {\n        id,\n        title: planData.title || \"新建计划\",\n        description: planData.description || \"\",\n        currentStageId: defaultStageId,\n        stages: [\n          {\n            id: defaultStageId,\n            title: \"第一阶段\",\n            completed: false,\n            tasks: [],\n          },\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: \"ongoing\",\n        progress: 0,\n        ...planData\n      };\n      \n      set(state => ({ plans: [...state.plans, newPlan] }));\n      return id;\n    }\n  },\n\n  updatePlan: async (id: string, updates: Partial<Plan>) => {\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API更新计划\n      await planApi.updatePlan(id, updates);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '更新计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        )\n      }));\n    }\n  },\n\n  renamePlan: async (id: string, newTitle: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API重命名计划\n      await planApi.renamePlan(id, newTitle);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to rename plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '重命名计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  deletePlan: async (id: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API删除计划（软删除）\n      await planApi.deletePlan(id);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to delete plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '删除计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  getCurrentStage: (planId: string) => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    \n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    \n    return { stage, plan };\n  }\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}