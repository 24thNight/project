{"ast":null,"code":"import React,{useEffect}from'react';import{useParams,useLocation,useNavigate,useSearchParams}from'react-router-dom';import{ClarificationContainer}from'../features/clarification';import{toast}from'sonner';import{jsx as _jsx}from\"react/jsx-runtime\";const ClarificationPage=()=>{const{planId}=useParams();const location=useLocation();const navigate=useNavigate();const[searchParams]=useSearchParams();// Extract goal title from location state if available\nconst state=location.state;const goalTitle=state===null||state===void 0?void 0:state.goalTitle;const lang=(state===null||state===void 0?void 0:state.lang)||'en';// 检查是否有从URL或状态传递过来的目标标题\nuseEffect(()=>{// 如果没有传递 goalTitle，且也没有 planId（编辑现有计划），提示错误并返回首页\nif(!goalTitle&&!planId){toast.error('请先输入您要实现的目标');navigate('/');}},[goalTitle,planId,navigate]);// 检查是否开启了模拟模式\nuseEffect(()=>{if(searchParams.get('useMock')==='true'&&process.env.NODE_ENV!=='production'){console.log('已开启模拟 API 模式');}},[searchParams]);// Handle completion - redirect to the plan details\nconst handleComplete=newPlanId=>{navigate(`/plans/${newPlanId}`);};if(!goalTitle&&!planId){return null;}return/*#__PURE__*/_jsx(\"div\",{className:\"container mx-auto py-8\",children:/*#__PURE__*/_jsx(ClarificationContainer,{goalTitle:goalTitle,planId:planId,lang:lang,onComplete:handleComplete})});};export default ClarificationPage;","map":{"version":3,"names":["React","useEffect","useParams","useLocation","useNavigate","useSearchParams","ClarificationContainer","toast","jsx","_jsx","ClarificationPage","planId","location","navigate","searchParams","state","goalTitle","lang","error","get","process","env","NODE_ENV","console","log","handleComplete","newPlanId","className","children","onComplete"],"sources":["/home/devbox/project/src/pages/clarification-page.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport { ClarificationContainer } from '../features/clarification';\nimport { Language } from '../lib/i18n';\nimport { toast } from 'sonner';\n\ninterface LocationState {\n  goalTitle?: string;\n  lang?: Language;\n}\n\nconst ClarificationPage: React.FC = () => {\n  const { planId } = useParams<{ planId: string }>();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  \n  // Extract goal title from location state if available\n  const state = location.state as LocationState;\n  const goalTitle = state?.goalTitle;\n  const lang = state?.lang || 'en';\n  \n  // 检查是否有从URL或状态传递过来的目标标题\n  useEffect(() => {\n    // 如果没有传递 goalTitle，且也没有 planId（编辑现有计划），提示错误并返回首页\n    if (!goalTitle && !planId) {\n      toast.error('请先输入您要实现的目标');\n      navigate('/');\n    }\n  }, [goalTitle, planId, navigate]);\n\n  // 检查是否开启了模拟模式\n  useEffect(() => {\n    if (searchParams.get('useMock') === 'true' && process.env.NODE_ENV !== 'production') {\n      console.log('已开启模拟 API 模式');\n    }\n  }, [searchParams]);\n  \n  // Handle completion - redirect to the plan details\n  const handleComplete = (newPlanId: string) => {\n    navigate(`/plans/${newPlanId}`);\n  };\n  \n  if (!goalTitle && !planId) {\n    return null;\n  }\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <ClarificationContainer \n        goalTitle={goalTitle}\n        planId={planId}\n        lang={lang}\n        onComplete={handleComplete}\n      />\n    </div>\n  );\n};\n\nexport default ClarificationPage; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,SAAS,CAAEC,WAAW,CAAEC,WAAW,CAAEC,eAAe,KAAQ,kBAAkB,CACvF,OAASC,sBAAsB,KAAQ,2BAA2B,CAElE,OAASC,KAAK,KAAQ,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAO/B,KAAM,CAAAC,iBAA2B,CAAGA,CAAA,GAAM,CACxC,KAAM,CAAEC,MAAO,CAAC,CAAGT,SAAS,CAAqB,CAAC,CAClD,KAAM,CAAAU,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAU,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACU,YAAY,CAAC,CAAGT,eAAe,CAAC,CAAC,CAExC;AACA,KAAM,CAAAU,KAAK,CAAGH,QAAQ,CAACG,KAAsB,CAC7C,KAAM,CAAAC,SAAS,CAAGD,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEC,SAAS,CAClC,KAAM,CAAAC,IAAI,CAAG,CAAAF,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEE,IAAI,GAAI,IAAI,CAEhC;AACAhB,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAACe,SAAS,EAAI,CAACL,MAAM,CAAE,CACzBJ,KAAK,CAACW,KAAK,CAAC,aAAa,CAAC,CAC1BL,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAAE,CAACG,SAAS,CAAEL,MAAM,CAAEE,QAAQ,CAAC,CAAC,CAEjC;AACAZ,SAAS,CAAC,IAAM,CACd,GAAIa,YAAY,CAACK,GAAG,CAAC,SAAS,CAAC,GAAK,MAAM,EAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACnFC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC7B,CACF,CAAC,CAAE,CAACV,YAAY,CAAC,CAAC,CAElB;AACA,KAAM,CAAAW,cAAc,CAAIC,SAAiB,EAAK,CAC5Cb,QAAQ,CAAC,UAAUa,SAAS,EAAE,CAAC,CACjC,CAAC,CAED,GAAI,CAACV,SAAS,EAAI,CAACL,MAAM,CAAE,CACzB,MAAO,KAAI,CACb,CAEA,mBACEF,IAAA,QAAKkB,SAAS,CAAC,wBAAwB,CAAAC,QAAA,cACrCnB,IAAA,CAACH,sBAAsB,EACrBU,SAAS,CAAEA,SAAU,CACrBL,MAAM,CAAEA,MAAO,CACfM,IAAI,CAAEA,IAAK,CACXY,UAAU,CAAEJ,cAAe,CAC5B,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAf,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}