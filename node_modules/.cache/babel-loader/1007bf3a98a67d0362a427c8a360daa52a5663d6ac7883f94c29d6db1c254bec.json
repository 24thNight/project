{"ast":null,"code":"import axios from'axios';import{toast}from'sonner';import{t}from'../../../lib/i18n';import{mockClarificationApi}from'./mock-api';// API base URL - should be configured based on environment\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'https://jjnucnlvlsaj.sealoshzh.site';// 是否使用模拟API - 在以下情况使用模拟:\n// 1. 开发环境 (默认启用)\n// 2. 通过URL参数useMock=true显式启用\n// 3. 可以通过URL参数useMock=false显式禁用\nconst shouldUseMockApi=()=>{// 如果不是开发环境，永远不使用模拟\nif(process.env.NODE_ENV==='production'){return false;}// 检查是否通过URL参数配置\nif(typeof window!=='undefined'){const urlParams=new URLSearchParams(window.location.search);const mockParam=urlParams.get('useMock');// 如果URL参数明确指定了是否使用模拟\nif(mockParam!==null){return mockParam==='true';}}// 检查环境变量配置\nif(process.env.REACT_APP_USE_MOCK==='false'){return false;}// 开发环境下默认启用模拟\nreturn true;};// 用于开发时查看是否使用了模拟API\nif(process.env.NODE_ENV!=='production'){console.log(`[Clarification API] Using ${shouldUseMockApi()?'MOCK':'REAL'} API`);}// Create axios instance with the same config as the main API\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'},withCredentials:false});// Response interface according to project requirements\n// Error handling helper\nconst handleApiError=function(error){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';let errorMessage=t('api.errors.default',lang);if(error&&error.response){var _error$response$data;if((_error$response$data=error.response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){errorMessage=error.response.data.message;}}else if(error&&error.request){errorMessage=t('api.errors.network',lang);}toast.error(errorMessage);throw error;};export const clarificationApi={// Start a new clarification session\nstartSession:async function(planId){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';// 使用模拟API\nif(shouldUseMockApi()){try{return await mockClarificationApi.startSession(planId);}catch(error){console.error('[Mock API] Error starting session:',error);return handleApiError(error,lang);}}// 使用真实API\ntry{const response=await api.post('/clarification/sessions',{planId});return response.data.data.sessionId;}catch(error){return handleApiError(error,lang);}},// Submit an answer to a question\nsubmitAnswer:async function(sessionId,answer){let lang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'en';// 使用模拟API\nif(shouldUseMockApi()){try{return await mockClarificationApi.submitAnswer(sessionId,answer);}catch(error){console.error('[Mock API] Error submitting answer:',error);return handleApiError(error,lang);}}// 使用真实API\ntry{const response=await api.post(`/clarification/sessions/${sessionId}/answers`,{answer});return response.data.data.success;}catch(error){return handleApiError(error,lang);}},// Complete the session and generate the plan\ncompleteSession:async function(sessionId){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';// 使用模拟API\nif(shouldUseMockApi()){try{return await mockClarificationApi.completeSession(sessionId);}catch(error){console.error('[Mock API] Error completing session:',error);return handleApiError(error,lang);}}// 使用真实API\ntry{const response=await api.post(`/clarification/sessions/${sessionId}/complete`);return response.data.data.planId;}catch(error){return handleApiError(error,lang);}},// Create an SSE connection for streaming questions\ncreateQuestionStream:function(sessionId,onEvent,onError){let lang=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'en';// 使用模拟API\nif(shouldUseMockApi()){console.log('[Mock API] Creating mock question stream');return mockClarificationApi.createQuestionStream(sessionId,onEvent,onError);}// 使用真实API\n// Check if EventSource is available\nif(!window.EventSource){onError(t('clarify.error.sseError',lang));return{close:()=>{}};}// Create the SSE connection\nconst eventSource=new EventSource(`${API_BASE_URL}/clarification/sessions/${sessionId}/stream`);// Handle events\neventSource.onmessage=event=>{try{const parsedEvent=JSON.parse(event.data);onEvent(parsedEvent);}catch(err){if(process.env.NODE_ENV!=='production'){console.error('Error parsing SSE event:',err);}onError(t('clarify.error.generic',lang));}};// Handle connection open\neventSource.onopen=()=>{if(process.env.NODE_ENV!=='production'){console.log('SSE connection opened');}};// Handle errors\neventSource.onerror=()=>{if(process.env.NODE_ENV!=='production'){console.error('SSE connection error');}onError(t('clarify.error.sseError',lang));eventSource.close();};// Return a method to close the connection\nreturn{close:()=>{if(eventSource){eventSource.close();if(process.env.NODE_ENV!=='production'){console.log('SSE connection closed');}}}};}};","map":{"version":3,"names":["axios","toast","t","mockClarificationApi","API_BASE_URL","process","env","REACT_APP_API_URL","shouldUseMockApi","NODE_ENV","window","urlParams","URLSearchParams","location","search","mockParam","get","REACT_APP_USE_MOCK","console","log","api","create","baseURL","headers","withCredentials","handleApiError","error","lang","arguments","length","undefined","errorMessage","response","_error$response$data","data","message","request","clarificationApi","startSession","planId","post","sessionId","submitAnswer","answer","success","completeSession","createQuestionStream","onEvent","onError","EventSource","close","eventSource","onmessage","event","parsedEvent","JSON","parse","err","onopen","onerror"],"sources":["/home/devbox/project/src/features/clarification/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'sonner';\nimport { t } from '../../../lib/i18n';\nimport { Language } from '../../../lib/i18n';\nimport { Answer, StreamEvent } from '../types';\nimport { mockClarificationApi } from './mock-api';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// 是否使用模拟API - 在以下情况使用模拟:\n// 1. 开发环境 (默认启用)\n// 2. 通过URL参数useMock=true显式启用\n// 3. 可以通过URL参数useMock=false显式禁用\nconst shouldUseMockApi = () => {\n  // 如果不是开发环境，永远不使用模拟\n  if (process.env.NODE_ENV === 'production') {\n    return false;\n  }\n  \n  // 检查是否通过URL参数配置\n  if (typeof window !== 'undefined') {\n    const urlParams = new URLSearchParams(window.location.search);\n    const mockParam = urlParams.get('useMock');\n    \n    // 如果URL参数明确指定了是否使用模拟\n    if (mockParam !== null) {\n      return mockParam === 'true';\n    }\n  }\n  \n  // 检查环境变量配置\n  if (process.env.REACT_APP_USE_MOCK === 'false') {\n    return false;\n  }\n  \n  // 开发环境下默认启用模拟\n  return true;\n};\n\n// 用于开发时查看是否使用了模拟API\nif (process.env.NODE_ENV !== 'production') {\n  console.log(`[Clarification API] Using ${shouldUseMockApi() ? 'MOCK' : 'REAL'} API`);\n}\n\n// Create axios instance with the same config as the main API\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: false,\n});\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any, lang: Language = 'en'): never => {\n  let errorMessage = t('api.errors.default', lang);\n\n  if (error && error.response) {\n    if (error.response.data?.message) {\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    errorMessage = t('api.errors.network', lang);\n  }\n\n  toast.error(errorMessage);\n  throw error;\n};\n\nexport const clarificationApi = {\n  // Start a new clarification session\n  startSession: async (planId?: string, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.startSession(planId);\n      } catch (error) {\n        console.error('[Mock API] Error starting session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ sessionId: string }>>(\n        '/clarification/sessions', \n        { planId }\n      );\n      return response.data.data.sessionId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Submit an answer to a question\n  submitAnswer: async (sessionId: string, answer: Answer, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.submitAnswer(sessionId, answer);\n      } catch (error) {\n        console.error('[Mock API] Error submitting answer:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ success: boolean }>>(\n        `/clarification/sessions/${sessionId}/answers`,\n        { answer }\n      );\n      return response.data.data.success;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Complete the session and generate the plan\n  completeSession: async (sessionId: string, lang: Language = 'en') => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      try {\n        return await mockClarificationApi.completeSession(sessionId);\n      } catch (error) {\n        console.error('[Mock API] Error completing session:', error);\n        return handleApiError(error, lang);\n      }\n    }\n    \n    // 使用真实API\n    try {\n      const response = await api.post<ApiResponse<{ planId: string }>>(\n        `/clarification/sessions/${sessionId}/complete`\n      );\n      return response.data.data.planId;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  \n  // Create an SSE connection for streaming questions\n  createQuestionStream: (\n    sessionId: string, \n    onEvent: (event: StreamEvent) => void,\n    onError: (error: string) => void,\n    lang: Language = 'en'\n  ): { close: () => void } => {\n    // 使用模拟API\n    if (shouldUseMockApi()) {\n      console.log('[Mock API] Creating mock question stream');\n      return mockClarificationApi.createQuestionStream(sessionId, onEvent, onError);\n    }\n    \n    // 使用真实API\n    // Check if EventSource is available\n    if (!window.EventSource) {\n      onError(t('clarify.error.sseError', lang));\n      return { close: () => {} };\n    }\n    \n    // Create the SSE connection\n    const eventSource = new EventSource(\n      `${API_BASE_URL}/clarification/sessions/${sessionId}/stream`\n    );\n    \n    // Handle events\n    eventSource.onmessage = (event) => {\n      try {\n        const parsedEvent: StreamEvent = JSON.parse(event.data);\n        onEvent(parsedEvent);\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Error parsing SSE event:', err);\n        }\n        onError(t('clarify.error.generic', lang));\n      }\n    };\n    \n    // Handle connection open\n    eventSource.onopen = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.log('SSE connection opened');\n      }\n    };\n    \n    // Handle errors\n    eventSource.onerror = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('SSE connection error');\n      }\n      onError(t('clarify.error.sseError', lang));\n      eventSource.close();\n    };\n    \n    // Return a method to close the connection\n    return {\n      close: () => {\n        if (eventSource) {\n          eventSource.close();\n          if (process.env.NODE_ENV !== 'production') {\n            console.log('SSE connection closed');\n          }\n        }\n      }\n    };\n  }\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,KAAK,KAAQ,QAAQ,CAC9B,OAASC,CAAC,KAAQ,mBAAmB,CAGrC,OAASC,oBAAoB,KAAQ,YAAY,CAEjD;AACA,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,qCAAqC,CAE3F;AACA;AACA;AACA;AACA,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACA,GAAIH,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzC,MAAO,MAAK,CACd,CAEA;AACA,GAAI,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAE,CACjC,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,eAAe,CAACF,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC,CAC7D,KAAM,CAAAC,SAAS,CAAGJ,SAAS,CAACK,GAAG,CAAC,SAAS,CAAC,CAE1C;AACA,GAAID,SAAS,GAAK,IAAI,CAAE,CACtB,MAAO,CAAAA,SAAS,GAAK,MAAM,CAC7B,CACF,CAEA;AACA,GAAIV,OAAO,CAACC,GAAG,CAACW,kBAAkB,GAAK,OAAO,CAAE,CAC9C,MAAO,MAAK,CACd,CAEA;AACA,MAAO,KAAI,CACb,CAAC,CAED;AACA,GAAIZ,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzCS,OAAO,CAACC,GAAG,CAAC,6BAA6BX,gBAAgB,CAAC,CAAC,CAAG,MAAM,CAAG,MAAM,MAAM,CAAC,CACtF,CAEA;AACA,KAAM,CAAAY,GAAG,CAAGpB,KAAK,CAACqB,MAAM,CAAC,CACvBC,OAAO,CAAElB,YAAY,CACrBmB,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,eAAe,CAAE,KACnB,CAAC,CAAC,CAEF;AAOA;AACA,KAAM,CAAAC,cAAc,CAAG,QAAAA,CAACC,KAAU,CAAmC,IAAjC,CAAAC,IAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACvD,GAAI,CAAAG,YAAY,CAAG7B,CAAC,CAAC,oBAAoB,CAAEyB,IAAI,CAAC,CAEhD,GAAID,KAAK,EAAIA,KAAK,CAACM,QAAQ,CAAE,KAAAC,oBAAA,CAC3B,IAAAA,oBAAA,CAAIP,KAAK,CAACM,QAAQ,CAACE,IAAI,UAAAD,oBAAA,WAAnBA,oBAAA,CAAqBE,OAAO,CAAE,CAChCJ,YAAY,CAAGL,KAAK,CAACM,QAAQ,CAACE,IAAI,CAACC,OAAO,CAC5C,CACF,CAAC,IAAM,IAAIT,KAAK,EAAIA,KAAK,CAACU,OAAO,CAAE,CACjCL,YAAY,CAAG7B,CAAC,CAAC,oBAAoB,CAAEyB,IAAI,CAAC,CAC9C,CAEA1B,KAAK,CAACyB,KAAK,CAACK,YAAY,CAAC,CACzB,KAAM,CAAAL,KAAK,CACb,CAAC,CAED,MAAO,MAAM,CAAAW,gBAAgB,CAAG,CAC9B;AACAC,YAAY,CAAE,cAAAA,CAAOC,MAAe,CAA4B,IAA1B,CAAAZ,IAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACzD;AACA,GAAIpB,gBAAgB,CAAC,CAAC,CAAE,CACtB,GAAI,CACF,MAAO,MAAM,CAAAL,oBAAoB,CAACmC,YAAY,CAACC,MAAM,CAAC,CACxD,CAAE,MAAOb,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAEA;AACA,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACoB,IAAI,CAC7B,yBAAyB,CACzB,CAAED,MAAO,CACX,CAAC,CACD,MAAO,CAAAP,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACO,SAAS,CACrC,CAAE,MAAOf,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAAC,CAED;AACAe,YAAY,CAAE,cAAAA,CAAOD,SAAiB,CAAEE,MAAc,CAA4B,IAA1B,CAAAhB,IAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC3E;AACA,GAAIpB,gBAAgB,CAAC,CAAC,CAAE,CACtB,GAAI,CACF,MAAO,MAAM,CAAAL,oBAAoB,CAACuC,YAAY,CAACD,SAAS,CAAEE,MAAM,CAAC,CACnE,CAAE,MAAOjB,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC3D,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAEA;AACA,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACoB,IAAI,CAC7B,2BAA2BC,SAAS,UAAU,CAC9C,CAAEE,MAAO,CACX,CAAC,CACD,MAAO,CAAAX,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACU,OAAO,CACnC,CAAE,MAAOlB,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAAC,CAED;AACAkB,eAAe,CAAE,cAAAA,CAAOJ,SAAiB,CAA4B,IAA1B,CAAAd,IAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC9D;AACA,GAAIpB,gBAAgB,CAAC,CAAC,CAAE,CACtB,GAAI,CACF,MAAO,MAAM,CAAAL,oBAAoB,CAAC0C,eAAe,CAACJ,SAAS,CAAC,CAC9D,CAAE,MAAOf,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAEA;AACA,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACoB,IAAI,CAC7B,2BAA2BC,SAAS,WACtC,CAAC,CACD,MAAO,CAAAT,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACK,MAAM,CAClC,CAAE,MAAOb,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAEC,IAAI,CAAC,CACpC,CACF,CAAC,CAED;AACAmB,oBAAoB,CAAE,QAAAA,CACpBL,SAAiB,CACjBM,OAAqC,CACrCC,OAAgC,CAEN,IAD1B,CAAArB,IAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAErB;AACA,GAAIpB,gBAAgB,CAAC,CAAC,CAAE,CACtBU,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvD,MAAO,CAAAhB,oBAAoB,CAAC2C,oBAAoB,CAACL,SAAS,CAAEM,OAAO,CAAEC,OAAO,CAAC,CAC/E,CAEA;AACA;AACA,GAAI,CAACtC,MAAM,CAACuC,WAAW,CAAE,CACvBD,OAAO,CAAC9C,CAAC,CAAC,wBAAwB,CAAEyB,IAAI,CAAC,CAAC,CAC1C,MAAO,CAAEuB,KAAK,CAAEA,CAAA,GAAM,CAAC,CAAE,CAAC,CAC5B,CAEA;AACA,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAF,WAAW,CACjC,GAAG7C,YAAY,2BAA2BqC,SAAS,SACrD,CAAC,CAED;AACAU,WAAW,CAACC,SAAS,CAAIC,KAAK,EAAK,CACjC,GAAI,CACF,KAAM,CAAAC,WAAwB,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACnB,IAAI,CAAC,CACvDa,OAAO,CAACO,WAAW,CAAC,CACtB,CAAE,MAAOG,GAAG,CAAE,CACZ,GAAIpD,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzCS,OAAO,CAACQ,KAAK,CAAC,0BAA0B,CAAE+B,GAAG,CAAC,CAChD,CACAT,OAAO,CAAC9C,CAAC,CAAC,uBAAuB,CAAEyB,IAAI,CAAC,CAAC,CAC3C,CACF,CAAC,CAED;AACAwB,WAAW,CAACO,MAAM,CAAG,IAAM,CACzB,GAAIrD,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzCS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACtC,CACF,CAAC,CAED;AACAgC,WAAW,CAACQ,OAAO,CAAG,IAAM,CAC1B,GAAItD,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzCS,OAAO,CAACQ,KAAK,CAAC,sBAAsB,CAAC,CACvC,CACAsB,OAAO,CAAC9C,CAAC,CAAC,wBAAwB,CAAEyB,IAAI,CAAC,CAAC,CAC1CwB,WAAW,CAACD,KAAK,CAAC,CAAC,CACrB,CAAC,CAED;AACA,MAAO,CACLA,KAAK,CAAEA,CAAA,GAAM,CACX,GAAIC,WAAW,CAAE,CACfA,WAAW,CAACD,KAAK,CAAC,CAAC,CACnB,GAAI7C,OAAO,CAACC,GAAG,CAACG,QAAQ,GAAK,YAAY,CAAE,CACzCS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACtC,CACF,CACF,CACF,CAAC,CACH,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}