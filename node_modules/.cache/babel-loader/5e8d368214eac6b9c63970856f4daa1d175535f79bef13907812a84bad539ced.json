{"ast":null,"code":"import { create } from 'zustand';\nimport { mockPlans } from '../types/task';\nimport { planApi } from './api';\nexport const usePlanStore = create((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  language: 'en',\n  setLanguage: lang => {\n    set({\n      language: lang\n    });\n  },\n  fetchPlans: async lang => {\n    const currentLang = lang || get().language;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 使用API从后端获取计划列表\n      const plans = await planApi.fetchPlans(currentLang);\n\n      // Ensure every plan has a valid stages array\n      const validatedPlans = plans.map(plan => ({\n        ...plan,\n        stages: plan.stages || []\n      }));\n      set({\n        plans: validatedPlans,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error('Failed to fetch plans:', error);\n      set({\n        error: error instanceof Error ? error.message : '获取计划失败',\n        isLoading: false,\n        // 如果API失败，使用mock数据作为后备\n        plans: mockPlans\n      });\n    }\n  },\n  getPlanById: id => {\n    return get().plans.find(plan => plan.id === id);\n  },\n  setFocusPlan: id => {\n    set({\n      focusPlanId: id\n    });\n  },\n  addPlan: async (planData, lang) => {\n    const currentLang = lang || get().language;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API创建新计划\n      const newPlan = await planApi.createPlan(planData, currentLang);\n\n      // Ensure the plan has a valid stages array\n      const validatedPlan = {\n        ...newPlan,\n        stages: newPlan.stages || []\n      };\n      set(state => ({\n        plans: [...state.plans, validatedPlan],\n        isLoading: false\n      }));\n      return validatedPlan.id;\n    } catch (error) {\n      console.error('Failed to add plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '创建计划失败',\n        isLoading: false\n      });\n\n      // 回退到本地创建 (不依赖后端)\n      // 使用 API 模块中的方法创建本地计划，确保结构完整\n      const newPlan = planApi.createLocalPlan({\n        title: planData.title || \"新建计划\",\n        description: planData.description || \"\",\n        ...planData\n      });\n\n      // Local plan should already have stages array from planApi.createLocalPlan\n      set(state => ({\n        plans: [...state.plans, newPlan]\n      }));\n      return newPlan.id;\n    }\n  },\n  updatePlan: async (id, updates, lang) => {\n    const currentLang = lang || get().language;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API更新计划\n      await planApi.updatePlan(id, updates, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          ...updates,\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '更新计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          ...updates,\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  renamePlan: async (id, newTitle, lang) => {\n    const currentLang = lang || get().language;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API重命名计划\n      await planApi.renamePlan(id, newTitle, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          title: newTitle,\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to rename plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '重命名计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          title: newTitle,\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  deletePlan: async (id, lang) => {\n    const currentLang = lang || get().language;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 调用API删除计划（软删除）\n      await planApi.deletePlan(id, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          status: 'deleted',\n          updatedAt: new Date()\n        } : plan),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to delete plan:', error);\n      set({\n        error: error instanceof Error ? error.message : '删除计划失败',\n        isLoading: false\n      });\n\n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => plan.id === id ? {\n          ...plan,\n          status: 'deleted',\n          updatedAt: new Date()\n        } : plan)\n      }));\n    }\n  },\n  getCurrentStage: planId => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    return {\n      stage,\n      plan\n    };\n  }\n}));","map":{"version":3,"names":["create","mockPlans","planApi","usePlanStore","set","get","plans","focusPlanId","isLoading","error","language","setLanguage","lang","fetchPlans","currentLang","validatedPlans","map","plan","stages","console","Error","message","getPlanById","id","find","setFocusPlan","addPlan","planData","newPlan","createPlan","validatedPlan","state","createLocalPlan","title","description","updatePlan","updates","updatedAt","Date","renamePlan","newTitle","deletePlan","status","getCurrentStage","planId","p","stage","s","currentStageId"],"sources":["/home/devbox/project/src/lib/store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Plan, mockPlans } from '../types/task';\nimport { planApi } from './api';\nimport { Language } from './i18n';\n\ninterface PlanState {\n  plans: Plan[];\n  focusPlanId: string | null;\n  isLoading: boolean;\n  error: string | null;\n  language: Language;\n  \n  // Actions\n  setLanguage: (lang: Language) => void;\n  fetchPlans: (lang?: Language) => Promise<void>;\n  getPlanById: (id: string) => Plan | undefined;\n  setFocusPlan: (id: string | null) => void;\n  addPlan: (plan: Partial<Plan>, lang?: Language) => Promise<string>;\n  updatePlan: (id: string, updates: Partial<Plan>, lang?: Language) => Promise<void>;\n  renamePlan: (id: string, newTitle: string, lang?: Language) => Promise<void>;\n  deletePlan: (id: string, lang?: Language) => Promise<void>;\n  getCurrentStage: (planId: string) => { stage: any, plan: Plan } | null;\n}\n\nexport const usePlanStore = create<PlanState>((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  language: 'en',\n  \n  setLanguage: (lang: Language) => {\n    set({ language: lang });\n  },\n\n  fetchPlans: async (lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 使用API从后端获取计划列表\n      const plans = await planApi.fetchPlans(currentLang);\n      \n      // Ensure every plan has a valid stages array\n      const validatedPlans = plans.map(plan => ({\n        ...plan,\n        stages: plan.stages || []\n      }));\n      \n      set({ plans: validatedPlans, isLoading: false });\n    } catch (error) {\n      console.error('Failed to fetch plans:', error);\n      set({ \n        error: error instanceof Error ? error.message : '获取计划失败', \n        isLoading: false,\n        // 如果API失败，使用mock数据作为后备\n        plans: mockPlans\n      });\n    }\n  },\n\n  getPlanById: (id: string) => {\n    return get().plans.find(plan => plan.id === id);\n  },\n\n  setFocusPlan: (id: string | null) => {\n    set({ focusPlanId: id });\n  },\n\n  addPlan: async (planData: Partial<Plan>, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API创建新计划\n      const newPlan = await planApi.createPlan(planData, currentLang);\n      \n      // Ensure the plan has a valid stages array\n      const validatedPlan = {\n        ...newPlan,\n        stages: newPlan.stages || []\n      };\n      \n      set(state => ({ \n        plans: [...state.plans, validatedPlan],\n        isLoading: false \n      }));\n      return validatedPlan.id;\n    } catch (error) {\n      console.error('Failed to add plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '创建计划失败',\n        isLoading: false \n      });\n      \n      // 回退到本地创建 (不依赖后端)\n      // 使用 API 模块中的方法创建本地计划，确保结构完整\n      const newPlan = planApi.createLocalPlan({\n        title: planData.title || \"新建计划\",\n        description: planData.description || \"\",\n        ...planData\n      });\n      \n      // Local plan should already have stages array from planApi.createLocalPlan\n      set(state => ({ plans: [...state.plans, newPlan] }));\n      return newPlan.id;\n    }\n  },\n\n  updatePlan: async (id: string, updates: Partial<Plan>, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API更新计划\n      await planApi.updatePlan(id, updates, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '更新计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        )\n      }));\n    }\n  },\n\n  renamePlan: async (id: string, newTitle: string, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API重命名计划\n      await planApi.renamePlan(id, newTitle, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to rename plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '重命名计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  deletePlan: async (id: string, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API删除计划（软删除）\n      await planApi.deletePlan(id, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to delete plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '删除计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  getCurrentStage: (planId: string) => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    \n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    \n    return { stage, plan };\n  }\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}