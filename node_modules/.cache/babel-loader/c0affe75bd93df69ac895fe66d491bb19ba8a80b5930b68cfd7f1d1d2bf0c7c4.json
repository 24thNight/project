{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nconst initialState = {\n  session: null,\n  isLoading: false,\n  error: null,\n  isStreamingQuestion: false,\n  currentStreamedText: ''\n};\nexport const useClarificationStore = create()(devtools((set, get) => ({\n  ...initialState,\n  initSession: planId => {\n    const newSession = {\n      id: `session-${Date.now()}`,\n      planId,\n      status: 'pending',\n      currentQuestionIndex: -1,\n      questions: [],\n      answers: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    set({\n      session: newSession,\n      isLoading: false,\n      error: null,\n      isStreamingQuestion: false,\n      currentStreamedText: ''\n    });\n  },\n  resetSession: () => {\n    set(initialState);\n  },\n  setCurrentStreamedText: text => {\n    set({\n      currentStreamedText: text\n    });\n  },\n  setStreamingStatus: isStreaming => {\n    set({\n      isStreamingQuestion: isStreaming\n    });\n  },\n  addQuestion: question => {\n    const {\n      session\n    } = get();\n    if (!session) return;\n    const updatedSession = {\n      ...session,\n      questions: [...session.questions, question],\n      currentQuestionIndex: session.currentQuestionIndex + 1,\n      updatedAt: new Date()\n    };\n    set({\n      session: updatedSession\n    });\n  },\n  addAnswer: answer => {\n    const {\n      session\n    } = get();\n    if (!session) return;\n    const updatedSession = {\n      ...session,\n      answers: [...session.answers, answer],\n      updatedAt: new Date(),\n      status: 'in_progress'\n    };\n    set({\n      session: updatedSession\n    });\n  },\n  updateSessionStatus: status => {\n    const {\n      session\n    } = get();\n    if (!session) return;\n    const updatedSession = {\n      ...session,\n      status,\n      updatedAt: new Date(),\n      ...(status === 'completed' ? {\n        completedAt: new Date()\n      } : {})\n    };\n    set({\n      session: updatedSession\n    });\n  },\n  setLoading: isLoading => {\n    set({\n      isLoading\n    });\n  },\n  setError: error => {\n    set({\n      error,\n      isLoading: false,\n      isStreamingQuestion: false\n    });\n    if (error) {\n      const {\n        session\n      } = get();\n      if (session) {\n        get().updateSessionStatus('error');\n      }\n    }\n  },\n  handleStreamEvent: event => {\n    const {\n      isStreamingQuestion\n    } = get();\n    switch (event.type) {\n      case 'question':\n        if (!isStreamingQuestion) {\n          set({\n            isStreamingQuestion: true,\n            currentStreamedText: ''\n          });\n        }\n        set(state => ({\n          currentStreamedText: state.currentStreamedText + event.data\n        }));\n        break;\n      case 'completion':\n        // Create a complete question from the streamed text\n        if (isStreamingQuestion && event.id) {\n          const newQuestion = {\n            id: event.id,\n            text: get().currentStreamedText,\n            type: event.questionType || 'open',\n            options: event.options,\n            required: event.required || true\n          };\n          get().addQuestion(newQuestion);\n          set({\n            isStreamingQuestion: false,\n            currentStreamedText: ''\n          });\n        }\n        break;\n      case 'error':\n        get().setError(event.data);\n        break;\n    }\n  },\n  completeSession: () => {\n    get().updateSessionStatus('completed');\n    set({\n      isStreamingQuestion: false,\n      currentStreamedText: ''\n    });\n  }\n}), {\n  name: 'clarification-store'\n}));","map":{"version":3,"names":["create","devtools","initialState","session","isLoading","error","isStreamingQuestion","currentStreamedText","useClarificationStore","set","get","initSession","planId","newSession","id","Date","now","status","currentQuestionIndex","questions","answers","createdAt","updatedAt","resetSession","setCurrentStreamedText","text","setStreamingStatus","isStreaming","addQuestion","question","updatedSession","addAnswer","answer","updateSessionStatus","completedAt","setLoading","setError","handleStreamEvent","event","type","state","data","newQuestion","questionType","options","required","completeSession","name"],"sources":["/home/devbox/project/src/features/clarification/store/clarificationStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { \n  ClarificationState, \n  Answer, \n  Question, \n  ClarificationSession,\n  StreamEvent\n} from '../types';\n\ninterface ClarificationActions {\n  // Session actions\n  initSession: (planId?: string) => void;\n  resetSession: () => void;\n  \n  // Question and answer actions\n  setCurrentStreamedText: (text: string) => void;\n  setStreamingStatus: (isStreaming: boolean) => void;\n  addQuestion: (question: Question) => void;\n  addAnswer: (answer: Answer) => void;\n  updateSessionStatus: (status: ClarificationSession['status']) => void;\n  \n  // Loading and error states\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  \n  // Event handling\n  handleStreamEvent: (event: StreamEvent) => void;\n  completeSession: () => void;\n}\n\ntype ClarificationStore = ClarificationState & ClarificationActions;\n\nconst initialState: ClarificationState = {\n  session: null,\n  isLoading: false,\n  error: null,\n  isStreamingQuestion: false,\n  currentStreamedText: '',\n};\n\nexport const useClarificationStore = create<ClarificationStore>()(\n  devtools(\n    (set, get) => ({\n      ...initialState,\n      \n      initSession: (planId) => {\n        const newSession: ClarificationSession = {\n          id: `session-${Date.now()}`,\n          planId,\n          status: 'pending',\n          currentQuestionIndex: -1,\n          questions: [],\n          answers: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        \n        set({ \n          session: newSession,\n          isLoading: false,\n          error: null,\n          isStreamingQuestion: false,\n          currentStreamedText: '',\n        });\n      },\n      \n      resetSession: () => {\n        set(initialState);\n      },\n      \n      setCurrentStreamedText: (text) => {\n        set({ currentStreamedText: text });\n      },\n      \n      setStreamingStatus: (isStreaming) => {\n        set({ isStreamingQuestion: isStreaming });\n      },\n      \n      addQuestion: (question) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          questions: [...session.questions, question],\n          currentQuestionIndex: session.currentQuestionIndex + 1,\n          updatedAt: new Date(),\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      addAnswer: (answer) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          answers: [...session.answers, answer],\n          updatedAt: new Date(),\n          status: 'in_progress' as const,\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      updateSessionStatus: (status) => {\n        const { session } = get();\n        if (!session) return;\n        \n        const updatedSession = {\n          ...session,\n          status,\n          updatedAt: new Date(),\n          ...(status === 'completed' ? { completedAt: new Date() } : {}),\n        };\n        \n        set({ session: updatedSession });\n      },\n      \n      setLoading: (isLoading) => {\n        set({ isLoading });\n      },\n      \n      setError: (error) => {\n        set({ \n          error,\n          isLoading: false,\n          isStreamingQuestion: false\n        });\n        \n        if (error) {\n          const { session } = get();\n          if (session) {\n            get().updateSessionStatus('error');\n          }\n        }\n      },\n      \n      handleStreamEvent: (event) => {\n        const { isStreamingQuestion } = get();\n        \n        switch (event.type) {\n          case 'question':\n            if (!isStreamingQuestion) {\n              set({ isStreamingQuestion: true, currentStreamedText: '' });\n            }\n            \n            set((state) => ({ \n              currentStreamedText: state.currentStreamedText + event.data \n            }));\n            break;\n            \n          case 'completion':\n            // Create a complete question from the streamed text\n            if (isStreamingQuestion && event.id) {\n              const newQuestion: Question = {\n                id: event.id,\n                text: get().currentStreamedText,\n                type: event.questionType || 'open',\n                options: event.options,\n                required: event.required || true,\n              };\n              \n              get().addQuestion(newQuestion);\n              set({ \n                isStreamingQuestion: false,\n                currentStreamedText: ''\n              });\n            }\n            break;\n            \n          case 'error':\n            get().setError(event.data);\n            break;\n        }\n      },\n      \n      completeSession: () => {\n        get().updateSessionStatus('completed');\n        set({ \n          isStreamingQuestion: false,\n          currentStreamedText: '',\n        });\n      },\n    }),\n    { name: 'clarification-store' }\n  )\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}