{"ast":null,"code":"import{create}from'zustand';import{mockPlans}from'../types/task';import{planApi}from'./api';export const usePlanStore=create((set,get)=>({plans:[],focusPlanId:null,isLoading:false,error:null,language:'zh',setLanguage:lang=>{set({language:lang});},fetchPlans:async lang=>{const currentLang=lang||get().language;set({isLoading:true,error:null});try{// 使用API从后端获取计划列表\nconst plans=await planApi.fetchPlans(currentLang);// Ensure every plan has a valid stages array\nconst validatedPlans=plans.map(plan=>({...plan,stages:plan.stages||[]}));set({plans:validatedPlans,isLoading:false});}catch(error){console.error('Failed to fetch plans:',error);set({error:error instanceof Error?error.message:'获取计划失败',isLoading:false,// 如果API失败，使用mock数据作为后备\nplans:mockPlans});}},getPlanById:id=>{return get().plans.find(plan=>plan.id===id);},setFocusPlan:id=>{set({focusPlanId:id});},addPlan:async(planData,lang)=>{const currentLang=lang||get().language;set({isLoading:true,error:null});try{// 调用API创建新计划\nconst newPlan=await planApi.createPlan(planData,currentLang);// Ensure the plan has a valid stages array\nconst validatedPlan={...newPlan,stages:newPlan.stages||[]};set(state=>({plans:[...state.plans,validatedPlan],isLoading:false}));return validatedPlan.id;}catch(error){console.error('Failed to add plan:',error);set({error:error instanceof Error?error.message:'创建计划失败',isLoading:false});// 回退到本地创建 (不依赖后端)\n// 使用 API 模块中的方法创建本地计划，确保结构完整\nconst newPlan=planApi.createLocalPlan({title:planData.title||\"新建计划\",description:planData.description||\"\",...planData});// Local plan should already have stages array from planApi.createLocalPlan\nset(state=>({plans:[...state.plans,newPlan]}));return newPlan.id;}},updatePlan:async(id,updates,lang)=>{const currentLang=lang||get().language;set({isLoading:true,error:null});try{// 调用API更新计划\nawait planApi.updatePlan(id,updates,currentLang);set(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,...updates,updatedAt:new Date()}:plan),isLoading:false}));}catch(error){console.error('Failed to update plan:',error);set({error:error instanceof Error?error.message:'更新计划失败',isLoading:false});// 仍在本地更新UI以保持响应性\nset(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,...updates,updatedAt:new Date()}:plan)}));}},renamePlan:async(id,newTitle,lang)=>{const currentLang=lang||get().language;set({isLoading:true,error:null});try{// 调用API重命名计划\nawait planApi.renamePlan(id,newTitle,currentLang);set(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,title:newTitle,updatedAt:new Date()}:plan),isLoading:false}));}catch(error){console.error('Failed to rename plan:',error);set({error:error instanceof Error?error.message:'重命名计划失败',isLoading:false});// 仍在本地更新UI以保持响应性\nset(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,title:newTitle,updatedAt:new Date()}:plan)}));}},deletePlan:async(id,lang)=>{const currentLang=lang||get().language;set({isLoading:true,error:null});try{// 调用API删除计划（软删除）\nawait planApi.deletePlan(id,currentLang);set(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,status:'deleted',updatedAt:new Date()}:plan),isLoading:false}));}catch(error){console.error('Failed to delete plan:',error);set({error:error instanceof Error?error.message:'删除计划失败',isLoading:false});// 仍在本地更新UI以保持响应性\nset(state=>({plans:state.plans.map(plan=>plan.id===id?{...plan,status:'deleted',updatedAt:new Date()}:plan)}));}},getCurrentStage:planId=>{const plan=get().plans.find(p=>p.id===planId);if(!plan)return null;const stage=plan.stages.find(s=>s.id===plan.currentStageId);if(!stage)return null;return{stage,plan};}}));","map":{"version":3,"names":["create","mockPlans","planApi","usePlanStore","set","get","plans","focusPlanId","isLoading","error","language","setLanguage","lang","fetchPlans","currentLang","validatedPlans","map","plan","stages","console","Error","message","getPlanById","id","find","setFocusPlan","addPlan","planData","newPlan","createPlan","validatedPlan","state","createLocalPlan","title","description","updatePlan","updates","updatedAt","Date","renamePlan","newTitle","deletePlan","status","getCurrentStage","planId","p","stage","s","currentStageId"],"sources":["/home/devbox/project/src/lib/store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Plan, mockPlans } from '../types/task';\nimport { planApi } from './api';\nimport { Language } from './i18n';\n\ninterface PlanState {\n  plans: Plan[];\n  focusPlanId: string | null;\n  isLoading: boolean;\n  error: string | null;\n  language: Language;\n  \n  // Actions\n  setLanguage: (lang: Language) => void;\n  fetchPlans: (lang?: Language) => Promise<void>;\n  getPlanById: (id: string) => Plan | undefined;\n  setFocusPlan: (id: string | null) => void;\n  addPlan: (plan: Partial<Plan>, lang?: Language) => Promise<string>;\n  updatePlan: (id: string, updates: Partial<Plan>, lang?: Language) => Promise<void>;\n  renamePlan: (id: string, newTitle: string, lang?: Language) => Promise<void>;\n  deletePlan: (id: string, lang?: Language) => Promise<void>;\n  getCurrentStage: (planId: string) => { stage: any, plan: Plan } | null;\n}\n\nexport const usePlanStore = create<PlanState>((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  language: 'zh',\n  \n  setLanguage: (lang: Language) => {\n    set({ language: lang });\n  },\n\n  fetchPlans: async (lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 使用API从后端获取计划列表\n      const plans = await planApi.fetchPlans(currentLang);\n      \n      // Ensure every plan has a valid stages array\n      const validatedPlans = plans.map(plan => ({\n        ...plan,\n        stages: plan.stages || []\n      }));\n      \n      set({ plans: validatedPlans, isLoading: false });\n    } catch (error) {\n      console.error('Failed to fetch plans:', error);\n      set({ \n        error: error instanceof Error ? error.message : '获取计划失败', \n        isLoading: false,\n        // 如果API失败，使用mock数据作为后备\n        plans: mockPlans\n      });\n    }\n  },\n\n  getPlanById: (id: string) => {\n    return get().plans.find(plan => plan.id === id);\n  },\n\n  setFocusPlan: (id: string | null) => {\n    set({ focusPlanId: id });\n  },\n\n  addPlan: async (planData: Partial<Plan>, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API创建新计划\n      const newPlan = await planApi.createPlan(planData, currentLang);\n      \n      // Ensure the plan has a valid stages array\n      const validatedPlan = {\n        ...newPlan,\n        stages: newPlan.stages || []\n      };\n      \n      set(state => ({ \n        plans: [...state.plans, validatedPlan],\n        isLoading: false \n      }));\n      return validatedPlan.id;\n    } catch (error) {\n      console.error('Failed to add plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '创建计划失败',\n        isLoading: false \n      });\n      \n      // 回退到本地创建 (不依赖后端)\n      // 使用 API 模块中的方法创建本地计划，确保结构完整\n      const newPlan = planApi.createLocalPlan({\n        title: planData.title || \"新建计划\",\n        description: planData.description || \"\",\n        ...planData\n      });\n      \n      // Local plan should already have stages array from planApi.createLocalPlan\n      set(state => ({ plans: [...state.plans, newPlan] }));\n      return newPlan.id;\n    }\n  },\n\n  updatePlan: async (id: string, updates: Partial<Plan>, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API更新计划\n      await planApi.updatePlan(id, updates, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '更新计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n        )\n      }));\n    }\n  },\n\n  renamePlan: async (id: string, newTitle: string, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API重命名计划\n      await planApi.renamePlan(id, newTitle, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to rename plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '重命名计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, title: newTitle, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  deletePlan: async (id: string, lang) => {\n    const currentLang = lang || get().language;\n    set({ isLoading: true, error: null });\n    try {\n      // 调用API删除计划（软删除）\n      await planApi.deletePlan(id, currentLang);\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        ),\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error('Failed to delete plan:', error);\n      set({ \n        error: error instanceof Error ? error.message : '删除计划失败',\n        isLoading: false \n      });\n      \n      // 仍在本地更新UI以保持响应性\n      set(state => ({\n        plans: state.plans.map(plan => \n          plan.id === id \n            ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n            : plan\n        )\n      }));\n    }\n  },\n\n  getCurrentStage: (planId: string) => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    \n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    \n    return { stage, plan };\n  }\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}