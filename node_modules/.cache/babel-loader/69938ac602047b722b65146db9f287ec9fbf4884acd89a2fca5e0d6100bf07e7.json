{"ast":null,"code":"var _jsxFileName = \"/home/devbox/project/src/pages/clarification-page.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useParams, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport { ClarificationContainer } from '../features/clarification';\nimport { toast } from 'sonner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClarificationPage = () => {\n  _s();\n  const {\n    planId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  // Extract goal title from location state if available\n  const state = location.state;\n  const goalTitle = state === null || state === void 0 ? void 0 : state.goalTitle;\n  const lang = (state === null || state === void 0 ? void 0 : state.lang) || 'en';\n\n  // 检查是否有从URL或状态传递过来的目标标题\n  useEffect(() => {\n    // 如果没有传递 goalTitle，且也没有 planId（编辑现有计划），提示错误并返回首页\n    if (!goalTitle && !planId) {\n      toast.error('请先输入您要实现的目标');\n      navigate('/');\n    }\n  }, [goalTitle, planId, navigate]);\n\n  // 检查是否开启了模拟模式\n  useEffect(() => {\n    if (searchParams.get('useMock') === 'true' && process.env.NODE_ENV !== 'production') {\n      console.log('已开启模拟 API 模式');\n    }\n  }, [searchParams]);\n\n  // Handle completion - redirect to the plan details\n  const handleComplete = newPlanId => {\n    navigate(`/plans/${newPlanId}`);\n  };\n  if (!goalTitle && !planId) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto py-8\",\n    children: /*#__PURE__*/_jsxDEV(ClarificationContainer, {\n      goalTitle: goalTitle,\n      planId: planId,\n      lang: lang,\n      onComplete: handleComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(ClarificationPage, \"Xqaii+/yYhj0KfPebSLbL0kYPCI=\", false, function () {\n  return [useParams, useLocation, useNavigate, useSearchParams];\n});\n_c = ClarificationPage;\nexport default ClarificationPage;\nvar _c;\n$RefreshReg$(_c, \"ClarificationPage\");","map":{"version":3,"names":["React","useEffect","useParams","useLocation","useNavigate","useSearchParams","ClarificationContainer","toast","jsxDEV","_jsxDEV","ClarificationPage","_s","planId","location","navigate","searchParams","state","goalTitle","lang","error","get","process","env","NODE_ENV","console","log","handleComplete","newPlanId","className","children","onComplete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/devbox/project/src/pages/clarification-page.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport { ClarificationContainer } from '../features/clarification';\nimport { Language } from '../lib/i18n';\nimport { toast } from 'sonner';\n\ninterface LocationState {\n  goalTitle?: string;\n  lang?: Language;\n}\n\nconst ClarificationPage: React.FC = () => {\n  const { planId } = useParams<{ planId: string }>();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  \n  // Extract goal title from location state if available\n  const state = location.state as LocationState;\n  const goalTitle = state?.goalTitle;\n  const lang = state?.lang || 'en';\n  \n  // 检查是否有从URL或状态传递过来的目标标题\n  useEffect(() => {\n    // 如果没有传递 goalTitle，且也没有 planId（编辑现有计划），提示错误并返回首页\n    if (!goalTitle && !planId) {\n      toast.error('请先输入您要实现的目标');\n      navigate('/');\n    }\n  }, [goalTitle, planId, navigate]);\n\n  // 检查是否开启了模拟模式\n  useEffect(() => {\n    if (searchParams.get('useMock') === 'true' && process.env.NODE_ENV !== 'production') {\n      console.log('已开启模拟 API 模式');\n    }\n  }, [searchParams]);\n  \n  // Handle completion - redirect to the plan details\n  const handleComplete = (newPlanId: string) => {\n    navigate(`/plans/${newPlanId}`);\n  };\n  \n  if (!goalTitle && !planId) {\n    return null;\n  }\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <ClarificationContainer \n        goalTitle={goalTitle}\n        planId={planId}\n        lang={lang}\n        onComplete={handleComplete}\n      />\n    </div>\n  );\n};\n\nexport default ClarificationPage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AACvF,SAASC,sBAAsB,QAAQ,2BAA2B;AAElE,SAASC,KAAK,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO/B,MAAMC,iBAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAO,CAAC,GAAGV,SAAS,CAAqB,CAAC;EAClD,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACW,YAAY,CAAC,GAAGV,eAAe,CAAC,CAAC;;EAExC;EACA,MAAMW,KAAK,GAAGH,QAAQ,CAACG,KAAsB;EAC7C,MAAMC,SAAS,GAAGD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,SAAS;EAClC,MAAMC,IAAI,GAAG,CAAAF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,IAAI,KAAI,IAAI;;EAEhC;EACAjB,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACgB,SAAS,IAAI,CAACL,MAAM,EAAE;MACzBL,KAAK,CAACY,KAAK,CAAC,aAAa,CAAC;MAC1BL,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC,EAAE,CAACG,SAAS,EAAEL,MAAM,EAAEE,QAAQ,CAAC,CAAC;;EAEjC;EACAb,SAAS,CAAC,MAAM;IACd,IAAIc,YAAY,CAACK,GAAG,CAAC,SAAS,CAAC,KAAK,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACnFC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;EACF,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMW,cAAc,GAAIC,SAAiB,IAAK;IAC5Cb,QAAQ,CAAC,UAAUa,SAAS,EAAE,CAAC;EACjC,CAAC;EAED,IAAI,CAACV,SAAS,IAAI,CAACL,MAAM,EAAE;IACzB,OAAO,IAAI;EACb;EAEA,oBACEH,OAAA;IAAKmB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACrCpB,OAAA,CAACH,sBAAsB;MACrBW,SAAS,EAAEA,SAAU;MACrBL,MAAM,EAAEA,MAAO;MACfM,IAAI,EAAEA,IAAK;MACXY,UAAU,EAAEJ;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvB,EAAA,CA9CID,iBAA2B;EAAA,QACZR,SAAS,EACXC,WAAW,EACXC,WAAW,EACLC,eAAe;AAAA;AAAA8B,EAAA,GAJlCzB,iBAA2B;AAgDjC,eAAeA,iBAAiB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}