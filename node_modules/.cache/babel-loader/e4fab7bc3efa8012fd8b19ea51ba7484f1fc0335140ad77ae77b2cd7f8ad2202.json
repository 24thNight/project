{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'sonner';\nimport { t } from './i18n';\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // 支持跨域请求\n  withCredentials: false\n});\n\n// 请求拦截器 - 只在开发环境下输出日志\napi.interceptors.request.use(config => {\n  if (process.env.NODE_ENV !== 'production') {\n    var _config$method;\n    console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  }\n  return config;\n}, error => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('API Request Error:', error);\n  }\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 只在开发环境下输出日志\napi.interceptors.response.use(response => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log('API Response:', response.status, response.data);\n  }\n  return response;\n}, error => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('API Response Error:', error.response || error.message || error);\n  }\n  return Promise.reject(error);\n});\n\n// Response interface according to project requirements\n\n// Error handling helper\nconst handleApiError = (error, lang = 'en') => {\n  // 从错误响应中获取消息，或使用默认错误消息\n  let errorMessage = t('api.errors.default', lang);\n\n  // Check if it's an axios error by checking for response property\n  if (error && error.response) {\n    var _error$response$data;\n    if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n      // 使用服务器返回的错误消息\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    // 网络错误 - 请求发出但没有收到响应\n    errorMessage = t('api.errors.network', lang);\n  }\n  toast.error(errorMessage);\n  throw error;\n};\n\n/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */\nconst handleSuccess = (action, lang = 'en') => {\n  toast.success(t(`api.success.${action}`, lang));\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(lang = 'en') {\n    try {\n      const response = await api.get('/plans');\n      return response.data.data;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error fetching plans:', error);\n      }\n      // 返回空数组而不是抛出错误，这样UI可以正常显示空状态\n      return [];\n    }\n  },\n  // 获取单个计划详情\n  async getPlanById(id, lang = 'en') {\n    try {\n      const response = await api.get(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 创建新计划\n  async createPlan(plan, lang = 'en') {\n    try {\n      // 尝试通过 API 创建\n      const response = await api.post('/plans', plan);\n      handleSuccess('create', lang);\n\n      // 如果成功，返回后端返回的数据\n      if (response.data && response.data.success && response.data.data) {\n        return response.data.data;\n      }\n\n      // 如果后端返回格式不正确，创建本地计划\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Backend response format incorrect, creating local plan');\n      }\n      const localPlan = this.createLocalPlan(plan);\n      return localPlan;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error creating plan via API, falling back to local creation', error);\n      }\n      // 创建本地计划作为备份\n      const localPlan = this.createLocalPlan(plan);\n      // 仍然显示成功消息，因为从用户角度看任务创建成功了\n      handleSuccess('create', lang);\n      return localPlan;\n    }\n  },\n  // 创建本地计划（无需 API）\n  createLocalPlan(planData) {\n    const id = `plan-${Date.now()}`;\n    const defaultStageId = `stage-${Date.now()}`;\n    return {\n      id,\n      title: planData.title || \"新建计划\",\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [{\n        id: defaultStageId,\n        title: \"第一阶段\",\n        completed: false,\n        tasks: []\n      }],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n      ...planData\n    };\n  },\n  // 更新计划\n  async updatePlan(id, updates, lang = 'en') {\n    try {\n      const response = await api.put(`/plans/${id}`, updates);\n      handleSuccess('update', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 重命名计划\n  async renamePlan(id, newTitle, lang = 'en') {\n    try {\n      const response = await api.patch(`/plans/${id}/rename`, {\n        title: newTitle\n      });\n      handleSuccess('rename', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n  // 删除计划（软删除）\n  async deletePlan(id, lang = 'en') {\n    try {\n      await api.delete(`/plans/${id}`);\n      handleSuccess('delete', lang);\n    } catch (error) {\n      handleApiError(error, lang);\n    }\n  },\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId, lang = 'en') {\n    try {\n      const response = await api.get(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  }\n};","map":{"version":3,"names":["axios","toast","t","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","NODE_ENV","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","message","handleApiError","lang","errorMessage","_error$response$data","handleSuccess","action","success","planApi","fetchPlans","get","getPlanById","id","createPlan","plan","post","warn","localPlan","createLocalPlan","planData","Date","now","defaultStageId","title","description","currentStageId","stages","completed","tasks","createdAt","updatedAt","progress","updatePlan","updates","put","renamePlan","newTitle","patch","deletePlan","delete","getPlanCurrentStage","planId"],"sources":["/home/devbox/project/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Plan } from '../types/task';\nimport { toast } from 'sonner';\nimport { t } from './i18n';\nimport { Language } from './i18n';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // 支持跨域请求\n  withCredentials: false,\n});\n\n// 请求拦截器 - 只在开发环境下输出日志\napi.interceptors.request.use(\n  (config) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('API Request:', config.method?.toUpperCase(), config.url);\n    }\n    return config;\n  },\n  (error) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('API Request Error:', error);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 只在开发环境下输出日志\napi.interceptors.response.use(\n  (response) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('API Response:', response.status, response.data);\n    }\n    return response;\n  },\n  (error) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('API Response Error:', error.response || error.message || error);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any, lang: Language = 'en'): never => {\n  // 从错误响应中获取消息，或使用默认错误消息\n  let errorMessage = t('api.errors.default', lang);\n\n  // Check if it's an axios error by checking for response property\n  if (error && error.response) {\n    if (error.response.data?.message) {\n      // 使用服务器返回的错误消息\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    // 网络错误 - 请求发出但没有收到响应\n    errorMessage = t('api.errors.network', lang);\n  }\n\n  toast.error(errorMessage);\n  throw error;\n};\n\n/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */\nconst handleSuccess = (action: 'create' | 'update' | 'delete' | 'rename', lang: Language = 'en') => {\n  toast.success(t(`api.success.${action}`, lang));\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(lang: Language = 'en'): Promise<Plan[]> {\n    try {\n      const response = await api.get<ApiResponse<Plan[]>>('/plans');\n      return response.data.data;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error fetching plans:', error);\n      }\n      // 返回空数组而不是抛出错误，这样UI可以正常显示空状态\n      return [];\n    }\n  },\n\n  // 获取单个计划详情\n  async getPlanById(id: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.get<ApiResponse<Plan>>(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 创建新计划\n  async createPlan(plan: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      // 尝试通过 API 创建\n      const response = await api.post<ApiResponse<Plan>>('/plans', plan);\n      handleSuccess('create', lang);\n      \n      // 如果成功，返回后端返回的数据\n      if (response.data && response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      \n      // 如果后端返回格式不正确，创建本地计划\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Backend response format incorrect, creating local plan');\n      }\n      const localPlan = this.createLocalPlan(plan);\n      return localPlan;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error creating plan via API, falling back to local creation', error);\n      }\n      // 创建本地计划作为备份\n      const localPlan = this.createLocalPlan(plan);\n      // 仍然显示成功消息，因为从用户角度看任务创建成功了\n      handleSuccess('create', lang);\n      return localPlan;\n    }\n  },\n  \n  // 创建本地计划（无需 API）\n  createLocalPlan(planData: Partial<Plan>): Plan {\n    const id = `plan-${Date.now()}`;\n    const defaultStageId = `stage-${Date.now()}`;\n    \n    return {\n      id,\n      title: planData.title || \"新建计划\",\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [\n        {\n          id: defaultStageId,\n          title: \"第一阶段\",\n          completed: false,\n          tasks: [],\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n      ...planData\n    };\n  },\n\n  // 更新计划\n  async updatePlan(id: string, updates: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.put<ApiResponse<Plan>>(`/plans/${id}`, updates);\n      handleSuccess('update', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 重命名计划\n  async renamePlan(id: string, newTitle: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.patch<ApiResponse<Plan>>(`/plans/${id}/rename`, { title: newTitle });\n      handleSuccess('rename', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 删除计划（软删除）\n  async deletePlan(id: string, lang: Language = 'en'): Promise<void> {\n    try {\n      await api.delete<ApiResponse<null>>(`/plans/${id}`);\n      handleSuccess('delete', lang);\n    } catch (error) {\n      handleApiError(error, lang);\n    }\n  },\n\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId: string, lang: Language = 'en'): Promise<any> {\n    try {\n      const response = await api.get<ApiResponse<any>>(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}