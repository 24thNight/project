{"ast":null,"code":"import axios from'axios';import{toast}from'sonner';import{t}from'./i18n';// API base URL - should be configured based on environment\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'https://jjnucnlvlsaj.sealoshzh.site';// Create axios instance\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'},// 支持跨域请求\nwithCredentials:false});// 请求拦截器 - 只在开发环境下输出日志\napi.interceptors.request.use(config=>{if(process.env.NODE_ENV!=='production'){var _config$method;console.log('API Request:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);}return config;},error=>{if(process.env.NODE_ENV!=='production'){console.error('API Request Error:',error);}return Promise.reject(error);});// 响应拦截器 - 只在开发环境下输出日志\napi.interceptors.response.use(response=>{if(process.env.NODE_ENV!=='production'){console.log('API Response:',response.status,response.data);}return response;},error=>{if(process.env.NODE_ENV!=='production'){console.error('API Response Error:',error.response||error.message||error);}return Promise.reject(error);});// Response interface according to project requirements\n// Error handling helper\nconst handleApiError=function(error){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';// 从错误响应中获取消息，或使用默认错误消息\nlet errorMessage=t('api.errors.default',lang);// Check if it's an axios error by checking for response property\nif(error&&error.response){var _error$response$data;if((_error$response$data=error.response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){// 使用服务器返回的错误消息\nerrorMessage=error.response.data.message;}}else if(error&&error.request){// 网络错误 - 请求发出但没有收到响应\nerrorMessage=t('api.errors.network',lang);}toast.error(errorMessage);throw error;};/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */const handleSuccess=function(action){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';toast.success(t(`api.success.${action}`,lang));};// API methods\nexport const planApi={// 获取所有计划\nasync fetchPlans(){let lang=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'en';try{const response=await api.get('/plans');return response.data.data;}catch(error){if(process.env.NODE_ENV!=='production'){console.error('Error fetching plans:',error);}// 返回空数组而不是抛出错误，这样UI可以正常显示空状态\nreturn[];}},// 获取单个计划详情\nasync getPlanById(id){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';try{const response=await api.get(`/plans/${id}`);return response.data.data;}catch(error){return handleApiError(error,lang);}},// 创建新计划\nasync createPlan(plan){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';try{// 尝试通过 API 创建\nconst response=await api.post('/plans',plan);handleSuccess('create',lang);// 如果成功，返回后端返回的数据\nif(response.data&&response.data.success&&response.data.data){return response.data.data;}// 如果后端返回格式不正确，创建本地计划\nif(process.env.NODE_ENV!=='production'){console.warn('Backend response format incorrect, creating local plan');}const localPlan=this.createLocalPlan(plan);return localPlan;}catch(error){if(process.env.NODE_ENV!=='production'){console.error('Error creating plan via API, falling back to local creation',error);}// 创建本地计划作为备份\nconst localPlan=this.createLocalPlan(plan);// 仍然显示成功消息，因为从用户角度看任务创建成功了\nhandleSuccess('create',lang);return localPlan;}},// 创建本地计划（无需 API）\ncreateLocalPlan(planData){const id=`plan-${Date.now()}`;const defaultStageId=`stage-${Date.now()}`;return{id,title:planData.title||\"新建计划\",description:planData.description||\"\",currentStageId:defaultStageId,stages:[{id:defaultStageId,title:\"第一阶段\",completed:false,tasks:[]}],createdAt:new Date(),updatedAt:new Date(),status:\"ongoing\",progress:0,...planData};},// 更新计划\nasync updatePlan(id,updates){let lang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'en';try{const response=await api.put(`/plans/${id}`,updates);handleSuccess('update',lang);return response.data.data;}catch(error){return handleApiError(error,lang);}},// 重命名计划\nasync renamePlan(id,newTitle){let lang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'en';try{const response=await api.patch(`/plans/${id}/rename`,{title:newTitle});handleSuccess('rename',lang);return response.data.data;}catch(error){return handleApiError(error,lang);}},// 删除计划（软删除）\nasync deletePlan(id){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';try{await api.delete(`/plans/${id}`);handleSuccess('delete',lang);}catch(error){handleApiError(error,lang);}},// 获取计划当前阶段\nasync getPlanCurrentStage(planId){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';try{const response=await api.get(`/plans/${planId}/current-stage`);return response.data.data;}catch(error){return handleApiError(error,lang);}}};","map":{"version":3,"names":["axios","toast","t","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","NODE_ENV","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","message","handleApiError","lang","arguments","length","undefined","errorMessage","_error$response$data","handleSuccess","action","success","planApi","fetchPlans","get","getPlanById","id","createPlan","plan","post","warn","localPlan","createLocalPlan","planData","Date","now","defaultStageId","title","description","currentStageId","stages","completed","tasks","createdAt","updatedAt","progress","updatePlan","updates","put","renamePlan","newTitle","patch","deletePlan","delete","getPlanCurrentStage","planId"],"sources":["/home/devbox/project/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Plan } from '../types/task';\nimport { toast } from 'sonner';\nimport { t } from './i18n';\nimport { Language } from './i18n';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // 支持跨域请求\n  withCredentials: false,\n});\n\n// 请求拦截器 - 只在开发环境下输出日志\napi.interceptors.request.use(\n  (config) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('API Request:', config.method?.toUpperCase(), config.url);\n    }\n    return config;\n  },\n  (error) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('API Request Error:', error);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 只在开发环境下输出日志\napi.interceptors.response.use(\n  (response) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('API Response:', response.status, response.data);\n    }\n    return response;\n  },\n  (error) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('API Response Error:', error.response || error.message || error);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any, lang: Language = 'en'): never => {\n  // 从错误响应中获取消息，或使用默认错误消息\n  let errorMessage = t('api.errors.default', lang);\n\n  // Check if it's an axios error by checking for response property\n  if (error && error.response) {\n    if (error.response.data?.message) {\n      // 使用服务器返回的错误消息\n      errorMessage = error.response.data.message;\n    }\n  } else if (error && error.request) {\n    // 网络错误 - 请求发出但没有收到响应\n    errorMessage = t('api.errors.network', lang);\n  }\n\n  toast.error(errorMessage);\n  throw error;\n};\n\n/**\n * 处理 API 响应\n * @param action API 操作类型：create, update, delete, rename\n * @param lang 当前语言\n */\nconst handleSuccess = (action: 'create' | 'update' | 'delete' | 'rename', lang: Language = 'en') => {\n  toast.success(t(`api.success.${action}`, lang));\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(lang: Language = 'en'): Promise<Plan[]> {\n    try {\n      const response = await api.get<ApiResponse<Plan[]>>('/plans');\n      return response.data.data;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error fetching plans:', error);\n      }\n      // 返回空数组而不是抛出错误，这样UI可以正常显示空状态\n      return [];\n    }\n  },\n\n  // 获取单个计划详情\n  async getPlanById(id: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.get<ApiResponse<Plan>>(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 创建新计划\n  async createPlan(plan: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      // 尝试通过 API 创建\n      const response = await api.post<ApiResponse<Plan>>('/plans', plan);\n      handleSuccess('create', lang);\n      \n      // 如果成功，返回后端返回的数据\n      if (response.data && response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      \n      // 如果后端返回格式不正确，创建本地计划\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Backend response format incorrect, creating local plan');\n      }\n      const localPlan = this.createLocalPlan(plan);\n      return localPlan;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Error creating plan via API, falling back to local creation', error);\n      }\n      // 创建本地计划作为备份\n      const localPlan = this.createLocalPlan(plan);\n      // 仍然显示成功消息，因为从用户角度看任务创建成功了\n      handleSuccess('create', lang);\n      return localPlan;\n    }\n  },\n  \n  // 创建本地计划（无需 API）\n  createLocalPlan(planData: Partial<Plan>): Plan {\n    const id = `plan-${Date.now()}`;\n    const defaultStageId = `stage-${Date.now()}`;\n    \n    return {\n      id,\n      title: planData.title || \"新建计划\",\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [\n        {\n          id: defaultStageId,\n          title: \"第一阶段\",\n          completed: false,\n          tasks: [],\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n      ...planData\n    };\n  },\n\n  // 更新计划\n  async updatePlan(id: string, updates: Partial<Plan>, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.put<ApiResponse<Plan>>(`/plans/${id}`, updates);\n      handleSuccess('update', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 重命名计划\n  async renamePlan(id: string, newTitle: string, lang: Language = 'en'): Promise<Plan> {\n    try {\n      const response = await api.patch<ApiResponse<Plan>>(`/plans/${id}/rename`, { title: newTitle });\n      handleSuccess('rename', lang);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n\n  // 删除计划（软删除）\n  async deletePlan(id: string, lang: Language = 'en'): Promise<void> {\n    try {\n      await api.delete<ApiResponse<null>>(`/plans/${id}`);\n      handleSuccess('delete', lang);\n    } catch (error) {\n      handleApiError(error, lang);\n    }\n  },\n\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId: string, lang: Language = 'en'): Promise<any> {\n    try {\n      const response = await api.get<ApiResponse<any>>(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error, lang);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}