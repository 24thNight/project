{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'sonner';\nimport { devError } from '../../../lib/utils';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Response interface\n\n/**\n * 任务规划模块的API服务\n */\nexport const plannerApi = {\n  /**\n   * 获取所有计划\n   */\n  async fetchPlans() {\n    try {\n      const response = await api.get('/plans');\n      return response.data.data;\n    } catch (error) {\n      devError('Error fetching plans:', error);\n      return [];\n    }\n  },\n  /**\n   * 获取单个计划详情\n   */\n  async getPlanById(id) {\n    try {\n      const response = await api.get(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      devError('Error fetching plan details:', error);\n      toast.error('无法获取计划详情');\n      return null;\n    }\n  },\n  /**\n   * 创建新计划\n   */\n  async createPlan(planData) {\n    try {\n      const response = await api.post('/plans', planData);\n      toast.success('计划创建成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error creating plan:', error);\n      // 检查是否是网络错误\n      const isNetworkError = error instanceof Error && axios.isCancel(error) === false && error.message === 'Network Error';\n      if (isNetworkError) {\n        toast.error('网络连接失败，已创建本地计划');\n      } else {\n        toast.error('API创建失败，已创建本地计划');\n      }\n      return null;\n    }\n  },\n  /**\n   * 更新计划\n   */\n  async updatePlan(id, updates) {\n    try {\n      const response = await api.put(`/plans/${id}`, updates);\n      toast.success('计划更新成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error updating plan:', error);\n      toast.error('更新计划失败');\n      return null;\n    }\n  },\n  /**\n   * 删除计划\n   */\n  async deletePlan(id) {\n    try {\n      await api.delete(`/plans/${id}`);\n      toast.success('计划已删除');\n      return true;\n    } catch (error) {\n      devError('Error deleting plan:', error);\n      toast.error('删除计划失败');\n      return false;\n    }\n  },\n  /**\n   * 添加任务到阶段\n   */\n  async addTask(params) {\n    try {\n      const {\n        planId,\n        stageId,\n        task\n      } = params;\n      const response = await api.post(`/plans/${planId}/stages/${stageId}/tasks`, task);\n      toast.success('任务创建成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error creating task:', error);\n      toast.error('创建任务失败');\n      return null;\n    }\n  },\n  /**\n   * 创建本地任务（无需API）\n   */\n  createLocalTask(params) {\n    const id = `task-${Date.now()}`;\n    return {\n      id,\n      title: params.task.title,\n      description: params.task.description || \"\",\n      status: params.task.status || \"active\",\n      priority: params.task.priority || \"medium\",\n      completed: false\n    };\n  },\n  /**\n   * 创建本地计划（无需API）\n   */\n  createLocalPlan(planData) {\n    const id = `plan-${Date.now()}`;\n    const defaultStageId = `stage-${Date.now()}`;\n    return {\n      id,\n      title: planData.title,\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [{\n        id: defaultStageId,\n        title: \"第一阶段\",\n        completed: false,\n        tasks: []\n      }],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0\n    };\n  }\n};","map":{"version":3,"names":["axios","toast","devError","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","plannerApi","fetchPlans","response","get","data","error","getPlanById","id","createPlan","planData","post","success","isNetworkError","Error","isCancel","message","updatePlan","updates","put","deletePlan","delete","addTask","params","planId","stageId","task","createLocalTask","Date","now","title","description","status","priority","completed","createLocalPlan","defaultStageId","currentStageId","stages","tasks","createdAt","updatedAt","progress"],"sources":["/home/devbox/project/src/features/task-planner/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Plan, CreatePlanParams, UpdatePlanParams, AddTaskParams, Task } from '../types';\nimport { toast } from 'sonner';\nimport { devError } from '../../../lib/utils';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://jjnucnlvlsaj.sealoshzh.site';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: false,\n});\n\n// Response interface\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n/**\n * 任务规划模块的API服务\n */\nexport const plannerApi = {\n  /**\n   * 获取所有计划\n   */\n  async fetchPlans(): Promise<Plan[]> {\n    try {\n      const response = await api.get<ApiResponse<Plan[]>>('/plans');\n      return response.data.data;\n    } catch (error) {\n      devError('Error fetching plans:', error);\n      return [];\n    }\n  },\n\n  /**\n   * 获取单个计划详情\n   */\n  async getPlanById(id: string): Promise<Plan | null> {\n    try {\n      const response = await api.get<ApiResponse<Plan>>(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      devError('Error fetching plan details:', error);\n      toast.error('无法获取计划详情');\n      return null;\n    }\n  },\n\n  /**\n   * 创建新计划\n   */\n  async createPlan(planData: CreatePlanParams): Promise<Plan | null> {\n    try {\n      const response = await api.post<ApiResponse<Plan>>('/plans', planData);\n      toast.success('计划创建成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error creating plan:', error);\n      // 检查是否是网络错误\n      const isNetworkError = error instanceof Error && \n        axios.isCancel(error) === false && \n        error.message === 'Network Error';\n        \n      if (isNetworkError) {\n        toast.error('网络连接失败，已创建本地计划');\n      } else {\n        toast.error('API创建失败，已创建本地计划');\n      }\n      return null;\n    }\n  },\n\n  /**\n   * 更新计划\n   */\n  async updatePlan(id: string, updates: UpdatePlanParams): Promise<Plan | null> {\n    try {\n      const response = await api.put<ApiResponse<Plan>>(`/plans/${id}`, updates);\n      toast.success('计划更新成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error updating plan:', error);\n      toast.error('更新计划失败');\n      return null;\n    }\n  },\n\n  /**\n   * 删除计划\n   */\n  async deletePlan(id: string): Promise<boolean> {\n    try {\n      await api.delete<ApiResponse<null>>(`/plans/${id}`);\n      toast.success('计划已删除');\n      return true;\n    } catch (error) {\n      devError('Error deleting plan:', error);\n      toast.error('删除计划失败');\n      return false;\n    }\n  },\n\n  /**\n   * 添加任务到阶段\n   */\n  async addTask(params: AddTaskParams): Promise<Task | null> {\n    try {\n      const { planId, stageId, task } = params;\n      const response = await api.post<ApiResponse<Task>>(`/plans/${planId}/stages/${stageId}/tasks`, task);\n      toast.success('任务创建成功');\n      return response.data.data;\n    } catch (error) {\n      devError('Error creating task:', error);\n      toast.error('创建任务失败');\n      return null;\n    }\n  },\n\n  /**\n   * 创建本地任务（无需API）\n   */\n  createLocalTask(params: AddTaskParams): Task {\n    const id = `task-${Date.now()}`;\n    \n    return {\n      id,\n      title: params.task.title,\n      description: params.task.description || \"\",\n      status: params.task.status || \"active\",\n      priority: params.task.priority || \"medium\",\n      completed: false,\n    };\n  },\n\n  /**\n   * 创建本地计划（无需API）\n   */\n  createLocalPlan(planData: CreatePlanParams): Plan {\n    const id = `plan-${Date.now()}`;\n    const defaultStageId = `stage-${Date.now()}`;\n    \n    return {\n      id,\n      title: planData.title,\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [\n        {\n          id: defaultStageId,\n          title: \"第一阶段\",\n          completed: false,\n          tasks: [],\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n    };\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,KAAK,QAAQ,QAAQ;AAC9B,SAASC,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,qCAAqC;;AAE3F;AACA,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;;AAOA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB;AACF;AACA;EACE,MAAMC,UAAUA,CAAA,EAAoB;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAsB,QAAQ,CAAC;MAC7D,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CAAC,uBAAuB,EAAEe,KAAK,CAAC;MACxC,OAAO,EAAE;IACX;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMC,WAAWA,CAACC,EAAU,EAAwB;IAClD,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAoB,UAAUI,EAAE,EAAE,CAAC;MACjE,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CAAC,8BAA8B,EAAEe,KAAK,CAAC;MAC/ChB,KAAK,CAACgB,KAAK,CAAC,UAAU,CAAC;MACvB,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMG,UAAUA,CAACC,QAA0B,EAAwB;IACjE,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMP,GAAG,CAACe,IAAI,CAAoB,QAAQ,EAAED,QAAQ,CAAC;MACtEpB,KAAK,CAACsB,OAAO,CAAC,QAAQ,CAAC;MACvB,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CAAC,sBAAsB,EAAEe,KAAK,CAAC;MACvC;MACA,MAAMO,cAAc,GAAGP,KAAK,YAAYQ,KAAK,IAC3CzB,KAAK,CAAC0B,QAAQ,CAACT,KAAK,CAAC,KAAK,KAAK,IAC/BA,KAAK,CAACU,OAAO,KAAK,eAAe;MAEnC,IAAIH,cAAc,EAAE;QAClBvB,KAAK,CAACgB,KAAK,CAAC,gBAAgB,CAAC;MAC/B,CAAC,MAAM;QACLhB,KAAK,CAACgB,KAAK,CAAC,iBAAiB,CAAC;MAChC;MACA,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMW,UAAUA,CAACT,EAAU,EAAEU,OAAyB,EAAwB;IAC5E,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMP,GAAG,CAACuB,GAAG,CAAoB,UAAUX,EAAE,EAAE,EAAEU,OAAO,CAAC;MAC1E5B,KAAK,CAACsB,OAAO,CAAC,QAAQ,CAAC;MACvB,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CAAC,sBAAsB,EAAEe,KAAK,CAAC;MACvChB,KAAK,CAACgB,KAAK,CAAC,QAAQ,CAAC;MACrB,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMc,UAAUA,CAACZ,EAAU,EAAoB;IAC7C,IAAI;MACF,MAAMZ,GAAG,CAACyB,MAAM,CAAoB,UAAUb,EAAE,EAAE,CAAC;MACnDlB,KAAK,CAACsB,OAAO,CAAC,OAAO,CAAC;MACtB,OAAO,IAAI;IACb,CAAC,CAAC,OAAON,KAAK,EAAE;MACdf,QAAQ,CAAC,sBAAsB,EAAEe,KAAK,CAAC;MACvChB,KAAK,CAACgB,KAAK,CAAC,QAAQ,CAAC;MACrB,OAAO,KAAK;IACd;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMgB,OAAOA,CAACC,MAAqB,EAAwB;IACzD,IAAI;MACF,MAAM;QAAEC,MAAM;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAGH,MAAM;MACxC,MAAMpB,QAAQ,GAAG,MAAMP,GAAG,CAACe,IAAI,CAAoB,UAAUa,MAAM,WAAWC,OAAO,QAAQ,EAAEC,IAAI,CAAC;MACpGpC,KAAK,CAACsB,OAAO,CAAC,QAAQ,CAAC;MACvB,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CAAC,sBAAsB,EAAEe,KAAK,CAAC;MACvChB,KAAK,CAACgB,KAAK,CAAC,QAAQ,CAAC;MACrB,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;EACEqB,eAAeA,CAACJ,MAAqB,EAAQ;IAC3C,MAAMf,EAAE,GAAG,QAAQoB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAE/B,OAAO;MACLrB,EAAE;MACFsB,KAAK,EAAEP,MAAM,CAACG,IAAI,CAACI,KAAK;MACxBC,WAAW,EAAER,MAAM,CAACG,IAAI,CAACK,WAAW,IAAI,EAAE;MAC1CC,MAAM,EAAET,MAAM,CAACG,IAAI,CAACM,MAAM,IAAI,QAAQ;MACtCC,QAAQ,EAAEV,MAAM,CAACG,IAAI,CAACO,QAAQ,IAAI,QAAQ;MAC1CC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EAED;AACF;AACA;EACEC,eAAeA,CAACzB,QAA0B,EAAQ;IAChD,MAAMF,EAAE,GAAG,QAAQoB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAC/B,MAAMO,cAAc,GAAG,SAASR,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAE5C,OAAO;MACLrB,EAAE;MACFsB,KAAK,EAAEpB,QAAQ,CAACoB,KAAK;MACrBC,WAAW,EAAErB,QAAQ,CAACqB,WAAW,IAAI,EAAE;MACvCM,cAAc,EAAED,cAAc;MAC9BE,MAAM,EAAE,CACN;QACE9B,EAAE,EAAE4B,cAAc;QAClBN,KAAK,EAAE,MAAM;QACbI,SAAS,EAAE,KAAK;QAChBK,KAAK,EAAE;MACT,CAAC,CACF;MACDC,SAAS,EAAE,IAAIZ,IAAI,CAAC,CAAC;MACrBa,SAAS,EAAE,IAAIb,IAAI,CAAC,CAAC;MACrBI,MAAM,EAAE,SAAS;MACjBU,QAAQ,EAAE;IACZ,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}