{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{t as translate}from'./i18n';import{usePlanStore}from'./store';import{jsx as _jsx}from\"react/jsx-runtime\";const LanguageContext=/*#__PURE__*/createContext(undefined);export const LanguageProvider=_ref=>{let{children}=_ref;const[language,setLanguageState]=useState('zh');const storeSetLanguage=usePlanStore(state=>state.setLanguage);const setLanguage=lang=>{setLanguageState(lang);storeSetLanguage(lang);// Sync with store\n};// Set initial language in the store\nuseEffect(()=>{storeSetLanguage(language);},[language,storeSetLanguage]);const t=key=>translate(key,language);return/*#__PURE__*/_jsx(LanguageContext.Provider,{value:{language,setLanguage,t},children:children});};export const useLanguage=()=>{const context=useContext(LanguageContext);if(!context){throw new Error('useLanguage must be used within a LanguageProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","t","translate","usePlanStore","jsx","_jsx","LanguageContext","undefined","LanguageProvider","_ref","children","language","setLanguageState","storeSetLanguage","state","setLanguage","lang","key","Provider","value","useLanguage","context","Error"],"sources":["/home/devbox/project/src/lib/language-context.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport { Language, TranslationKey, t as translate } from './i18n';\nimport { usePlanStore } from './store';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: TranslationKey) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [language, setLanguageState] = useState<Language>('zh');\n  const storeSetLanguage = usePlanStore(state => state.setLanguage);\n\n  const setLanguage = (lang: Language) => {\n    setLanguageState(lang);\n    storeSetLanguage(lang); // Sync with store\n  };\n\n  // Set initial language in the store\n  useEffect(() => {\n    storeSetLanguage(language);\n  }, [language, storeSetLanguage]);\n\n  const t = (key: TranslationKey) => translate(key, language);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAaC,SAAS,KAAQ,OAAO,CACxF,OAAmCC,CAAC,GAAI,CAAAC,SAAS,KAAQ,QAAQ,CACjE,OAASC,YAAY,KAAQ,SAAS,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAQvC,KAAM,CAAAC,eAAe,cAAGT,aAAa,CAAkCU,SAAS,CAAC,CAEjF,MAAO,MAAM,CAAAC,gBAAmD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC9E,KAAM,CAACE,QAAQ,CAAEC,gBAAgB,CAAC,CAAGb,QAAQ,CAAW,IAAI,CAAC,CAC7D,KAAM,CAAAc,gBAAgB,CAAGV,YAAY,CAACW,KAAK,EAAIA,KAAK,CAACC,WAAW,CAAC,CAEjE,KAAM,CAAAA,WAAW,CAAIC,IAAc,EAAK,CACtCJ,gBAAgB,CAACI,IAAI,CAAC,CACtBH,gBAAgB,CAACG,IAAI,CAAC,CAAE;AAC1B,CAAC,CAED;AACAhB,SAAS,CAAC,IAAM,CACda,gBAAgB,CAACF,QAAQ,CAAC,CAC5B,CAAC,CAAE,CAACA,QAAQ,CAAEE,gBAAgB,CAAC,CAAC,CAEhC,KAAM,CAAAZ,CAAC,CAAIgB,GAAmB,EAAKf,SAAS,CAACe,GAAG,CAAEN,QAAQ,CAAC,CAE3D,mBACEN,IAAA,CAACC,eAAe,CAACY,QAAQ,EAACC,KAAK,CAAE,CAAER,QAAQ,CAAEI,WAAW,CAAEd,CAAE,CAAE,CAAAS,QAAA,CAC3DA,QAAQ,CACe,CAAC,CAE/B,CAAC,CAED,MAAO,MAAM,CAAAU,WAAW,CAAGA,CAAA,GAA2B,CACpD,KAAM,CAAAC,OAAO,CAAGvB,UAAU,CAACQ,eAAe,CAAC,CAC3C,GAAI,CAACe,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,oDAAoD,CAAC,CACvE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}