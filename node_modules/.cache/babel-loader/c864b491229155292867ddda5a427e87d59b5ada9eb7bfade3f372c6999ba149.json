{"ast":null,"code":"var _jsxFileName = \"/home/devbox/project/src/pages/clarify-page.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useLanguage } from '../lib/language-context';\nimport { toast } from 'sonner';\n\n// Assume API base URL is configured elsewhere or use environment variable\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000'; // Adjust if needed\n\n// 日志辅助函数，仅在开发环境输出\nconst devLog = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(message, ...args);\n  }\n};\n\n// 错误日志辅助函数，仅在开发环境输出\nconst devError = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(message, ...args);\n  }\n};\nconst ClarifyPage = () => {\n  _s();\n  devLog(\"[ClarifyPage] Component mounted.\");\n  const {\n    t\n  } = useLanguage();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [taskTitle, setTaskTitle] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({}); // Store answers by index\n  const [currentIndex, setCurrentIndex] = useState(0); // Index of the question being currently asked/answered\n  const [currentInput, setCurrentInput] = useState('');\n  const [isLoading, setIsLoading] = useState(true); // Loading state for initial questions\n  const [isEnded, setIsEnded] = useState(false); // Flag for receiving [END]\n  const eventSourceRef = useRef(null);\n  const inputRef = useRef(null); // Ref for focusing input\n\n  // Effect for Initialization (Fetch title, POST, SSE)\n  useEffect(() => {\n    const title = searchParams.get('taskTitle');\n    if (!title) {\n      toast.error(t('clarify.error.missingTitle'));\n      navigate('/dashboard');\n      return;\n    }\n    const decodedTitle = decodeURIComponent(title);\n    setTaskTitle(decodedTitle);\n    setIsLoading(true);\n\n    // 创建清理函数，确保在任何情况下都能关闭SSE连接\n    const cleanupSSE = () => {\n      if (eventSourceRef.current) {\n        devLog('[ClarifyPage] Cleaning up SSE connection');\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n\n    // Function to start the process\n    const startClarification = async () => {\n      try {\n        // Close previous connection if exists before starting a new one\n        cleanupSSE();\n\n        // 1. Send POST request to start backend process\n        devLog('[ClarifyPage] Sending POST /api/clarify/start');\n        const postResponse = await fetch(`${API_BASE_URL}/api/clarify/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            taskTitle: decodedTitle\n          })\n        });\n        if (!postResponse.ok) {\n          devError('POST request failed:', postResponse.statusText);\n          toast.error(t('clarify.error.startFailed'));\n          // Decide if we should still try to connect to SSE or redirect\n          // For mock, we can continue to SSE\n          // navigate('/dashboard');\n          // return;\n        }\n        devLog('[ClarifyPage] POST request successful');\n\n        // 2. Establish SSE connection\n        devLog(`[ClarifyPage] Establishing SSE connection to /api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        const es = new EventSource(`${API_BASE_URL}/api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        eventSourceRef.current = es;\n        es.onopen = () => {\n          devLog('[ClarifyPage] SSE Connection Opened');\n          setIsLoading(false); // Stop loading once connection is open\n        };\n        es.onmessage = event => {\n          devLog('[ClarifyPage] SSE Message Received:', event.data);\n          if (event.data === '[END]') {\n            devLog('[ClarifyPage] SSE Received [END] marker');\n            setIsEnded(true);\n            cleanupSSE(); // 使用统一的清理函数\n          } else {\n            // Add new question\n            setQuestions(prev => [...prev, event.data]);\n          }\n        };\n        es.onerror = error => {\n          devError('[ClarifyPage] SSE Error:', error);\n          toast.error(t('clarify.error.sseError'));\n          setIsLoading(false);\n          setIsEnded(true); // Assume ended on error to prevent getting stuck\n          cleanupSSE(); // 使用统一的清理函数\n        };\n      } catch (error) {\n        devError('[ClarifyPage] Error during clarification start:', error);\n        toast.error(t('clarify.error.generic'));\n        setIsLoading(false);\n        // Maybe navigate back or show error state\n        navigate('/dashboard');\n      }\n    };\n    startClarification();\n\n    // 组件卸载时清理\n    return cleanupSSE;\n  }, [searchParams, navigate, t]);\n\n  // Effect for Navigation when finished\n  useEffect(() => {\n    // Check if all received questions have been answered AND the [END] marker was received\n    if (isEnded && questions.length > 0 && currentIndex === questions.length) {\n      devLog('[ClarifyPage] All questions answered and END received. Navigating to /plan...');\n      // Convert answers record to simple array in order\n      const finalAnswers = questions.map((_, index) => answers[index] || ''); // Get answer or empty string\n\n      // Short delay before navigation\n      const timer = setTimeout(() => {\n        navigate('/plan', {\n          state: {\n            taskTitle,\n            answers: finalAnswers,\n            questions\n          }\n        });\n      }, 300); // 减少延迟时间\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, questions, answers, isEnded, taskTitle, navigate]);\n\n  // Effect to focus input when current question changes\n  useEffect(() => {\n    if (currentIndex < questions.length && !isEnded) {\n      var _inputRef$current;\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    }\n  }, [currentIndex, questions.length, isEnded]);\n\n  // Handle answer submission\n  const handleSubmitAnswer = useCallback(() => {\n    if (currentInput.trim() === '' || currentIndex >= questions.length) return;\n    devLog(`[ClarifyPage] Submitting answer for index ${currentIndex}:`, currentInput.trim());\n    setAnswers(prev => ({\n      ...prev,\n      [currentIndex]: currentInput.trim()\n    }));\n    setCurrentInput('');\n    setCurrentIndex(prev => prev + 1);\n  }, [currentInput, currentIndex, questions.length]);\n\n  // Handle input keydown (Enter)\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSubmitAnswer();\n    }\n  };\n\n  // 处理返回Dashboard\n  const handleBackToDashboard = () => {\n    navigate('/dashboard');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 flex items-center justify-center p-4 md:p-6 zen-bg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl w-full bg-white rounded-xl shadow-lg p-6 md:p-10 space-y-6 md:space-y-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center border-b pb-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500 mb-1\",\n          children: t('clarify.yourGoal')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl md:text-2xl font-semibold text-gray-800\",\n          children: taskTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center py-8 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: t('clarify.loadingQuestions')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [questions.map((question, index) =>\n        // Only render answered questions and the current one\n        index <= currentIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `p-4 rounded-lg ${index < currentIndex ? 'bg-gray-50' : 'bg-indigo-50 border border-indigo-100'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800 mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: [\"Q\", index + 1, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 23\n              }, this), \" \", question]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }, this), index < currentIndex && answers[index] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ml-4 pl-3 border-l-2 border-indigo-200\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-indigo-700 italic\",\n                children: answers[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 23\n            }, this), index === currentIndex && !isEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 ml-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relative\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: inputRef,\n                  type: \"text\",\n                  value: currentInput,\n                  onChange: e => setCurrentInput(e.target.value),\n                  onKeyDown: handleKeyDown,\n                  placeholder: t('clarify.answerPlaceholder'),\n                  className: \"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\",\n                  disabled: currentIndex !== index || isEnded // Disable if not current or ended\n                  ,\n                  \"aria-label\": `Answer to question ${index + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400 pointer-events-none\",\n                  children: t('clarify.enterToSubmit')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this)), currentIndex < questions.length && !isEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-gray-500 pt-4\",\n          children: t('clarify.waitingNext')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this), isEnded && currentIndex === questions.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-indigo-600 font-medium pt-4\",\n          children: t('clarify.allQuestionsAnswered')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(ClarifyPage, \"yB5Sw5ElOM5oc8ytx+n1vtUdLjw=\", false, function () {\n  return [useLanguage, useNavigate, useSearchParams];\n});\n_c = ClarifyPage;\nexport default ClarifyPage;\nvar _c;\n$RefreshReg$(_c, \"ClarifyPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useNavigate","useSearchParams","useLanguage","toast","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","devLog","message","args","NODE_ENV","console","log","devError","error","ClarifyPage","_s","t","navigate","searchParams","taskTitle","setTaskTitle","questions","setQuestions","answers","setAnswers","currentIndex","setCurrentIndex","currentInput","setCurrentInput","isLoading","setIsLoading","isEnded","setIsEnded","eventSourceRef","inputRef","title","get","decodedTitle","decodeURIComponent","cleanupSSE","current","close","startClarification","postResponse","fetch","method","headers","body","JSON","stringify","ok","statusText","encodeURIComponent","es","EventSource","onopen","onmessage","event","data","prev","onerror","length","finalAnswers","map","_","index","timer","setTimeout","state","clearTimeout","_inputRef$current","focus","handleSubmitAnswer","trim","handleKeyDown","e","key","preventDefault","handleBackToDashboard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","ref","type","value","onChange","target","onKeyDown","placeholder","disabled","_c","$RefreshReg$"],"sources":["/home/devbox/project/src/pages/clarify-page.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useLanguage } from '../lib/language-context';\nimport { Button } from '../components/ui/button';\nimport { toast } from 'sonner';\n\n// Assume API base URL is configured elsewhere or use environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000'; // Adjust if needed\n\n// 日志辅助函数，仅在开发环境输出\nconst devLog = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(message, ...args);\n  }\n};\n\n// 错误日志辅助函数，仅在开发环境输出\nconst devError = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(message, ...args);\n  }\n};\n\ninterface ClarifyPageState {\n  taskTitle: string;\n  questions: string[];\n  answers: string[];\n}\n\nconst ClarifyPage: React.FC = () => {\n  devLog(\"[ClarifyPage] Component mounted.\");\n  const { t } = useLanguage();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const [taskTitle, setTaskTitle] = useState<string>('');\n  const [questions, setQuestions] = useState<string[]>([]);\n  const [answers, setAnswers] = useState<Record<number, string>>({}); // Store answers by index\n  const [currentIndex, setCurrentIndex] = useState(0); // Index of the question being currently asked/answered\n  const [currentInput, setCurrentInput] = useState('');\n  const [isLoading, setIsLoading] = useState(true); // Loading state for initial questions\n  const [isEnded, setIsEnded] = useState(false); // Flag for receiving [END]\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null); // Ref for focusing input\n\n  // Effect for Initialization (Fetch title, POST, SSE)\n  useEffect(() => {\n    const title = searchParams.get('taskTitle');\n    if (!title) {\n      toast.error(t('clarify.error.missingTitle'));\n      navigate('/dashboard');\n      return;\n    }\n\n    const decodedTitle = decodeURIComponent(title);\n    setTaskTitle(decodedTitle);\n    setIsLoading(true);\n\n    // 创建清理函数，确保在任何情况下都能关闭SSE连接\n    const cleanupSSE = () => {\n      if (eventSourceRef.current) {\n        devLog('[ClarifyPage] Cleaning up SSE connection');\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n\n    // Function to start the process\n    const startClarification = async () => {\n      try {\n        // Close previous connection if exists before starting a new one\n        cleanupSSE();\n\n        // 1. Send POST request to start backend process\n        devLog('[ClarifyPage] Sending POST /api/clarify/start');\n        const postResponse = await fetch(`${API_BASE_URL}/api/clarify/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ taskTitle: decodedTitle }),\n        });\n\n        if (!postResponse.ok) {\n          devError('POST request failed:', postResponse.statusText);\n          toast.error(t('clarify.error.startFailed'));\n          // Decide if we should still try to connect to SSE or redirect\n          // For mock, we can continue to SSE\n          // navigate('/dashboard');\n          // return;\n        }\n        devLog('[ClarifyPage] POST request successful');\n\n        // 2. Establish SSE connection\n        devLog(`[ClarifyPage] Establishing SSE connection to /api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        const es = new EventSource(`${API_BASE_URL}/api/clarify/stream?taskTitle=${encodeURIComponent(decodedTitle)}`);\n        eventSourceRef.current = es;\n\n        es.onopen = () => {\n          devLog('[ClarifyPage] SSE Connection Opened');\n          setIsLoading(false); // Stop loading once connection is open\n        };\n\n        es.onmessage = (event) => {\n          devLog('[ClarifyPage] SSE Message Received:', event.data);\n          if (event.data === '[END]') {\n            devLog('[ClarifyPage] SSE Received [END] marker');\n            setIsEnded(true);\n            cleanupSSE(); // 使用统一的清理函数\n          } else {\n            // Add new question\n            setQuestions(prev => [...prev, event.data]);\n          }\n        };\n\n        es.onerror = (error) => {\n          devError('[ClarifyPage] SSE Error:', error);\n          toast.error(t('clarify.error.sseError'));\n          setIsLoading(false);\n          setIsEnded(true); // Assume ended on error to prevent getting stuck\n          cleanupSSE(); // 使用统一的清理函数\n        };\n\n      } catch (error) {\n        devError('[ClarifyPage] Error during clarification start:', error);\n        toast.error(t('clarify.error.generic'));\n        setIsLoading(false);\n        // Maybe navigate back or show error state\n        navigate('/dashboard');\n      }\n    };\n\n    startClarification();\n\n    // 组件卸载时清理\n    return cleanupSSE;\n  }, [searchParams, navigate, t]);\n\n  // Effect for Navigation when finished\n  useEffect(() => {\n    // Check if all received questions have been answered AND the [END] marker was received\n    if (isEnded && questions.length > 0 && currentIndex === questions.length) {\n      devLog('[ClarifyPage] All questions answered and END received. Navigating to /plan...');\n      // Convert answers record to simple array in order\n      const finalAnswers = questions.map((_, index) => answers[index] || ''); // Get answer or empty string\n\n      // Short delay before navigation\n      const timer = setTimeout(() => {\n        navigate('/plan', {\n          state: { taskTitle, answers: finalAnswers, questions } as ClarifyPageState\n        });\n      }, 300); // 减少延迟时间\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, questions, answers, isEnded, taskTitle, navigate]);\n\n  // Effect to focus input when current question changes\n  useEffect(() => {\n    if (currentIndex < questions.length && !isEnded) {\n      inputRef.current?.focus();\n    }\n  }, [currentIndex, questions.length, isEnded]);\n\n  // Handle answer submission\n  const handleSubmitAnswer = useCallback(() => {\n    if (currentInput.trim() === '' || currentIndex >= questions.length) return;\n\n    devLog(`[ClarifyPage] Submitting answer for index ${currentIndex}:`, currentInput.trim());\n    setAnswers(prev => ({ ...prev, [currentIndex]: currentInput.trim() }));\n    setCurrentInput('');\n    setCurrentIndex(prev => prev + 1);\n  }, [currentInput, currentIndex, questions.length]);\n\n  // Handle input keydown (Enter)\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSubmitAnswer();\n    }\n  };\n\n  // 处理返回Dashboard\n  const handleBackToDashboard = () => {\n    navigate('/dashboard');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4 md:p-6 zen-bg\">\n      <div className=\"max-w-2xl w-full bg-white rounded-xl shadow-lg p-6 md:p-10 space-y-6 md:space-y-8\">\n        {/* Task Title Display */}\n        <div className=\"text-center border-b pb-4 mb-4\">\n          <p className=\"text-sm text-gray-500 mb-1\">{t('clarify.yourGoal')}</p>\n          <h1 className=\"text-xl md:text-2xl font-semibold text-gray-800\">{taskTitle}</h1>\n        </div>\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <div className=\"rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4\"></div>\n            <p className=\"text-gray-600\">{t('clarify.loadingQuestions')}</p>\n          </div>\n        )}\n\n        {/* Q&A Area */}\n        {!isLoading && (\n          <div className=\"space-y-6\">\n            {questions.map((question, index) => (\n              // Only render answered questions and the current one\n              index <= currentIndex && (\n                <div key={index} className=\"overflow-hidden\">\n                  <div className={`p-4 rounded-lg ${index < currentIndex ? 'bg-gray-50' : 'bg-indigo-50 border border-indigo-100'}`}>\n                    {/* Question */}\n                    <p className=\"text-gray-800 mb-3\">\n                      <span className=\"font-medium\">Q{index + 1}:</span> {question}\n                    </p>\n\n                    {/* Answer Display (for answered questions) */}\n                    {index < currentIndex && answers[index] && (\n                      <div className=\"ml-4 pl-3 border-l-2 border-indigo-200\">\n                        <p className=\"text-indigo-700 italic\">{answers[index]}</p>\n                      </div>\n                    )}\n\n                    {/* Input Box (for current question) */}\n                    {index === currentIndex && !isEnded && (\n                      <div className=\"mt-3 ml-4\">\n                        <div className=\"relative\">\n                          <input\n                            ref={inputRef}\n                            type=\"text\"\n                            value={currentInput}\n                            onChange={(e) => setCurrentInput(e.target.value)}\n                            onKeyDown={handleKeyDown}\n                            placeholder={t('clarify.answerPlaceholder')}\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\n                            disabled={currentIndex !== index || isEnded} // Disable if not current or ended\n                            aria-label={`Answer to question ${index + 1}`}\n                          />\n                          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400 pointer-events-none\">\n                            {t('clarify.enterToSubmit')}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )\n            ))}\n\n            {/* Waiting/Completion Message */}\n            {currentIndex < questions.length && !isEnded && (\n              <div className=\"text-center text-gray-500 pt-4\">\n                {t('clarify.waitingNext')}\n              </div>\n            )}\n            {isEnded && currentIndex === questions.length && (\n              <div className=\"text-center text-indigo-600 font-medium pt-4\">\n                {t('clarify.allQuestionsAnswered')}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* No explicit buttons as per requirement */}\n\n      </div>\n    </div>\n  );\n};\n\nexport default ClarifyPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}