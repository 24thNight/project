{"ast":null,"code":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\nexport function formatDate(date) {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\"\n  }).format(date);\n}\nexport function getProgressColor(progress) {\n  if (progress < 30) return \"bg-red-500\";\n  if (progress < 70) return \"bg-yellow-500\";\n  return \"bg-green-500\";\n}\n\n// Add these utility functions for development-only logging\nexport const devLog = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(message, ...args);\n  }\n};\nexport const devError = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(message, ...args);\n  }\n};\nexport const devWarn = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(message, ...args);\n  }\n};","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatDate","date","Intl","DateTimeFormat","month","day","year","format","getProgressColor","progress","devLog","message","args","process","env","NODE_ENV","console","log","devError","error","devWarn","warn"],"sources":["/home/devbox/project/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date): string {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  }).format(date);\n}\n\nexport function getProgressColor(progress: number): string {\n  if (progress < 30) return \"bg-red-500\";\n  if (progress < 70) return \"bg-yellow-500\";\n  return \"bg-green-500\";\n}\n\n// Add these utility functions for development-only logging\nexport const devLog = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(message, ...args);\n  }\n};\n\nexport const devError = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(message, ...args);\n  }\n};\n\nexport const devWarn = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(message, ...args);\n  }\n}; "],"mappings":"AAAA,SAA0BA,IAAI,QAAQ,MAAM;AAC5C,SAASC,OAAO,QAAQ,gBAAgB;AAExC,OAAO,SAASC,EAAEA,CAAC,GAAGC,MAAoB,EAAE;EAC1C,OAAOF,OAAO,CAACD,IAAI,CAACG,MAAM,CAAC,CAAC;AAC9B;AAEA,OAAO,SAASC,UAAUA,CAACC,IAAU,EAAU;EAC7C,OAAO,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;IACtCC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE;EACR,CAAC,CAAC,CAACC,MAAM,CAACN,IAAI,CAAC;AACjB;AAEA,OAAO,SAASO,gBAAgBA,CAACC,QAAgB,EAAU;EACzD,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,YAAY;EACtC,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,eAAe;EACzC,OAAO,cAAc;AACvB;;AAEA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,OAAe,EAAE,GAAGC,IAAW,KAAK;EACzD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCC,OAAO,CAACC,GAAG,CAACN,OAAO,EAAE,GAAGC,IAAI,CAAC;EAC/B;AACF,CAAC;AAED,OAAO,MAAMM,QAAQ,GAAGA,CAACP,OAAe,EAAE,GAAGC,IAAW,KAAK;EAC3D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCC,OAAO,CAACG,KAAK,CAACR,OAAO,EAAE,GAAGC,IAAI,CAAC;EACjC;AACF,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAGA,CAACT,OAAe,EAAE,GAAGC,IAAW,KAAK;EAC1D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCC,OAAO,CAACK,IAAI,CAACV,OAAO,EAAE,GAAGC,IAAI,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}