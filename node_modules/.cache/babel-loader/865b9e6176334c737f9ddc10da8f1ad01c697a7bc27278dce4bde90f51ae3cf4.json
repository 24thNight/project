{"ast":null,"code":"import { create } from 'zustand';\nimport { mockPlans } from '../types/task';\nexport const usePlanStore = create((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n  fetchPlans: () => {\n    set({\n      isLoading: true\n    });\n    // Simulating API call with mock data\n    setTimeout(() => {\n      set({\n        plans: mockPlans,\n        isLoading: false\n      });\n    }, 500);\n  },\n  getPlanById: id => {\n    return get().plans.find(plan => plan.id === id);\n  },\n  setFocusPlan: id => {\n    set({\n      focusPlanId: id\n    });\n  },\n  addPlan: planData => {\n    // Generate a unique ID for the new plan\n    const id = `plan-${Date.now()}`;\n\n    // Create a default stage\n    const defaultStageId = `stage-${Date.now()}`;\n\n    // Create the new plan with default values\n    const newPlan = {\n      id,\n      title: planData.title || \"新建计划\",\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [{\n        id: defaultStageId,\n        title: \"第一阶段\",\n        completed: false,\n        tasks: []\n      }],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n      ...planData\n    };\n    set(state => ({\n      plans: [...state.plans, newPlan]\n    }));\n    return id;\n  },\n  updatePlan: (id, updates) => {\n    set(state => ({\n      plans: state.plans.map(plan => plan.id === id ? {\n        ...plan,\n        ...updates,\n        updatedAt: new Date()\n      } : plan)\n    }));\n  },\n  renamePlan: (id, newTitle) => {\n    set(state => ({\n      plans: state.plans.map(plan => plan.id === id ? {\n        ...plan,\n        title: newTitle,\n        updatedAt: new Date()\n      } : plan)\n    }));\n  },\n  deletePlan: id => {\n    set(state => ({\n      plans: state.plans.map(plan => plan.id === id ? {\n        ...plan,\n        status: 'deleted',\n        updatedAt: new Date()\n      } : plan)\n    }));\n  },\n  getCurrentStage: planId => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    return {\n      stage,\n      plan\n    };\n  }\n}));","map":{"version":3,"names":["create","mockPlans","usePlanStore","set","get","plans","focusPlanId","isLoading","error","fetchPlans","setTimeout","getPlanById","id","find","plan","setFocusPlan","addPlan","planData","Date","now","defaultStageId","newPlan","title","description","currentStageId","stages","completed","tasks","createdAt","updatedAt","status","progress","state","updatePlan","updates","map","renamePlan","newTitle","deletePlan","getCurrentStage","planId","p","stage","s"],"sources":["/home/devbox/project/src/lib/store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Plan, mockPlans } from '../types/task';\n\ninterface PlanState {\n  plans: Plan[];\n  focusPlanId: string | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  fetchPlans: () => void;\n  getPlanById: (id: string) => Plan | undefined;\n  setFocusPlan: (id: string | null) => void;\n  addPlan: (plan: Partial<Plan>) => string;\n  updatePlan: (id: string, updates: Partial<Plan>) => void;\n  renamePlan: (id: string, newTitle: string) => void;\n  deletePlan: (id: string) => void;\n  getCurrentStage: (planId: string) => { stage: any, plan: Plan } | null;\n}\n\nexport const usePlanStore = create<PlanState>((set, get) => ({\n  plans: [],\n  focusPlanId: null,\n  isLoading: false,\n  error: null,\n\n  fetchPlans: () => {\n    set({ isLoading: true });\n    // Simulating API call with mock data\n    setTimeout(() => {\n      set({ plans: mockPlans, isLoading: false });\n    }, 500);\n  },\n\n  getPlanById: (id: string) => {\n    return get().plans.find(plan => plan.id === id);\n  },\n\n  setFocusPlan: (id: string | null) => {\n    set({ focusPlanId: id });\n  },\n\n  addPlan: (planData: Partial<Plan>) => {\n    // Generate a unique ID for the new plan\n    const id = `plan-${Date.now()}`;\n    \n    // Create a default stage\n    const defaultStageId = `stage-${Date.now()}`;\n    \n    // Create the new plan with default values\n    const newPlan: Plan = {\n      id,\n      title: planData.title || \"新建计划\",\n      description: planData.description || \"\",\n      currentStageId: defaultStageId,\n      stages: [\n        {\n          id: defaultStageId,\n          title: \"第一阶段\",\n          completed: false,\n          tasks: [],\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: \"ongoing\",\n      progress: 0,\n      ...planData\n    };\n    \n    set(state => ({ plans: [...state.plans, newPlan] }));\n    return id;\n  },\n\n  updatePlan: (id: string, updates: Partial<Plan>) => {\n    set(state => ({\n      plans: state.plans.map(plan => \n        plan.id === id ? { ...plan, ...updates, updatedAt: new Date() } : plan\n      )\n    }));\n  },\n\n  renamePlan: (id: string, newTitle: string) => {\n    set(state => ({\n      plans: state.plans.map(plan => \n        plan.id === id \n          ? { ...plan, title: newTitle, updatedAt: new Date() } \n          : plan\n      )\n    }));\n  },\n\n  deletePlan: (id: string) => {\n    set(state => ({\n      plans: state.plans.map(plan => \n        plan.id === id \n          ? { ...plan, status: 'deleted' as const, updatedAt: new Date() } \n          : plan\n      )\n    }));\n  },\n\n  getCurrentStage: (planId: string) => {\n    const plan = get().plans.find(p => p.id === planId);\n    if (!plan) return null;\n    \n    const stage = plan.stages.find(s => s.id === plan.currentStageId);\n    if (!stage) return null;\n    \n    return { stage, plan };\n  }\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAAeC,SAAS,QAAQ,eAAe;AAmB/C,OAAO,MAAMC,YAAY,GAAGF,MAAM,CAAY,CAACG,GAAG,EAAEC,GAAG,MAAM;EAC3DC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEXC,UAAU,EAAEA,CAAA,KAAM;IAChBN,GAAG,CAAC;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB;IACAG,UAAU,CAAC,MAAM;MACfP,GAAG,CAAC;QAAEE,KAAK,EAAEJ,SAAS;QAAEM,SAAS,EAAE;MAAM,CAAC,CAAC;IAC7C,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAEDI,WAAW,EAAGC,EAAU,IAAK;IAC3B,OAAOR,GAAG,CAAC,CAAC,CAACC,KAAK,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;EACjD,CAAC;EAEDG,YAAY,EAAGH,EAAiB,IAAK;IACnCT,GAAG,CAAC;MAAEG,WAAW,EAAEM;IAAG,CAAC,CAAC;EAC1B,CAAC;EAEDI,OAAO,EAAGC,QAAuB,IAAK;IACpC;IACA,MAAML,EAAE,GAAG,QAAQM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;IAE/B;IACA,MAAMC,cAAc,GAAG,SAASF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;IAE5C;IACA,MAAME,OAAa,GAAG;MACpBT,EAAE;MACFU,KAAK,EAAEL,QAAQ,CAACK,KAAK,IAAI,MAAM;MAC/BC,WAAW,EAAEN,QAAQ,CAACM,WAAW,IAAI,EAAE;MACvCC,cAAc,EAAEJ,cAAc;MAC9BK,MAAM,EAAE,CACN;QACEb,EAAE,EAAEQ,cAAc;QAClBE,KAAK,EAAE,MAAM;QACbI,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE;MACT,CAAC,CACF;MACDC,SAAS,EAAE,IAAIV,IAAI,CAAC,CAAC;MACrBW,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC;MACrBY,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE,CAAC;MACX,GAAGd;IACL,CAAC;IAEDd,GAAG,CAAC6B,KAAK,KAAK;MAAE3B,KAAK,EAAE,CAAC,GAAG2B,KAAK,CAAC3B,KAAK,EAAEgB,OAAO;IAAE,CAAC,CAAC,CAAC;IACpD,OAAOT,EAAE;EACX,CAAC;EAEDqB,UAAU,EAAEA,CAACrB,EAAU,EAAEsB,OAAsB,KAAK;IAClD/B,GAAG,CAAC6B,KAAK,KAAK;MACZ3B,KAAK,EAAE2B,KAAK,CAAC3B,KAAK,CAAC8B,GAAG,CAACrB,IAAI,IACzBA,IAAI,CAACF,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGE,IAAI;QAAE,GAAGoB,OAAO;QAAEL,SAAS,EAAE,IAAIX,IAAI,CAAC;MAAE,CAAC,GAAGJ,IACpE;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDsB,UAAU,EAAEA,CAACxB,EAAU,EAAEyB,QAAgB,KAAK;IAC5ClC,GAAG,CAAC6B,KAAK,KAAK;MACZ3B,KAAK,EAAE2B,KAAK,CAAC3B,KAAK,CAAC8B,GAAG,CAACrB,IAAI,IACzBA,IAAI,CAACF,EAAE,KAAKA,EAAE,GACV;QAAE,GAAGE,IAAI;QAAEQ,KAAK,EAAEe,QAAQ;QAAER,SAAS,EAAE,IAAIX,IAAI,CAAC;MAAE,CAAC,GACnDJ,IACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDwB,UAAU,EAAG1B,EAAU,IAAK;IAC1BT,GAAG,CAAC6B,KAAK,KAAK;MACZ3B,KAAK,EAAE2B,KAAK,CAAC3B,KAAK,CAAC8B,GAAG,CAACrB,IAAI,IACzBA,IAAI,CAACF,EAAE,KAAKA,EAAE,GACV;QAAE,GAAGE,IAAI;QAAEgB,MAAM,EAAE,SAAkB;QAAED,SAAS,EAAE,IAAIX,IAAI,CAAC;MAAE,CAAC,GAC9DJ,IACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDyB,eAAe,EAAGC,MAAc,IAAK;IACnC,MAAM1B,IAAI,GAAGV,GAAG,CAAC,CAAC,CAACC,KAAK,CAACQ,IAAI,CAAC4B,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAK4B,MAAM,CAAC;IACnD,IAAI,CAAC1B,IAAI,EAAE,OAAO,IAAI;IAEtB,MAAM4B,KAAK,GAAG5B,IAAI,CAACW,MAAM,CAACZ,IAAI,CAAC8B,CAAC,IAAIA,CAAC,CAAC/B,EAAE,KAAKE,IAAI,CAACU,cAAc,CAAC;IACjE,IAAI,CAACkB,KAAK,EAAE,OAAO,IAAI;IAEvB,OAAO;MAAEA,KAAK;MAAE5B;IAAK,CAAC;EACxB;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}