{"ast":null,"code":"var _jsxFileName = \"/home/devbox/project/src/lib/language-context.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { t as translate } from './i18n';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('en');\n  const t = key => translate(key, language);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage,\n      t\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","t","translate","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/home/devbox/project/src/lib/language-context.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Language, TranslationKey, t as translate } from './i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: TranslationKey) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const t = (key: TranslationKey) => translate(key, language);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAC7E,SAAmCC,CAAC,IAAIC,SAAS,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQlE,MAAMC,eAAe,gBAAGP,aAAa,CAAkCQ,SAAS,CAAC;AAEjF,OAAO,MAAMC,gBAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAW,IAAI,CAAC;EAExD,MAAMC,CAAC,GAAIW,GAAmB,IAAKV,SAAS,CAACU,GAAG,EAAEF,QAAQ,CAAC;EAE3D,oBACEN,OAAA,CAACC,eAAe,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEJ,QAAQ;MAAEC,WAAW;MAAEV;IAAE,CAAE;IAAAO,QAAA,EAC3DA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACT,EAAA,CAVWF,gBAAmD;AAAAY,EAAA,GAAnDZ,gBAAmD;AAYhE,OAAO,MAAMa,WAAW,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EACpD,MAAMC,OAAO,GAAGvB,UAAU,CAACM,eAAe,CAAC;EAC3C,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}