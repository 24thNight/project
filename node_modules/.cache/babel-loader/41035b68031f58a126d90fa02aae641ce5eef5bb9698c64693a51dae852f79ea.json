{"ast":null,"code":"import{useEffect,useRef,useCallback}from'react';import{useClarificationStore}from'../store/clarificationStore';import{clarificationApi}from'../utils/api';import{toast}from'sonner';import{t}from'../../../lib/i18n';// 开发环境的日志帮助函数\nconst devLog=function(message){if(process.env.NODE_ENV!=='production'){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log(`[Clarification Session] ${message}`,...args);}};export const useClarificationSession=function(planId){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';const{session,isLoading,error,isStreamingQuestion,currentStreamedText,initSession,resetSession,handleStreamEvent,setError,setLoading,addAnswer,completeSession}=useClarificationStore();const streamRef=useRef(null);// Start a new session\nconst startSession=useCallback(async()=>{devLog('Starting new session');try{setLoading(true);resetSession();// Start a session via the API\ndevLog('Calling API to start session');const sessionId=await clarificationApi.startSession(planId,lang);devLog('Session started with ID:',sessionId);// Initialize local session state\ninitSession(planId);// Create SSE connection for question streaming\nif(sessionId){devLog('Creating SSE connection');streamRef.current=clarificationApi.createQuestionStream(sessionId,event=>{devLog('Stream event received:',event.type);handleStreamEvent(event);},errorMsg=>{devLog('Stream error:',errorMsg);setError(errorMsg);},lang);}else{devLog('No session ID returned, cannot create stream');setError(t('clarify.error.startFailed',lang));}}catch(err){devLog('Error starting session:',err);setError(t('clarify.error.startFailed',lang));toast.error(t('clarify.error.startFailed',lang));}finally{setLoading(false);}},[planId,lang,initSession,resetSession,setLoading,setError,handleStreamEvent]);// Submit an answer to the current question\nconst submitAnswer=useCallback(async value=>{if(!session||!session.questions.length){devLog('Cannot submit answer: no active session or questions');return false;}try{const currentQuestion=session.questions[session.currentQuestionIndex];if(!currentQuestion){devLog('Cannot submit answer: no current question');return false;}devLog('Submitting answer to question:',currentQuestion.id);const answer={questionId:currentQuestion.id,value,timestamp:new Date()};// Add the answer to the local state\naddAnswer(answer);// Submit the answer to the backend\nif(session.id){devLog('Sending answer to API');await clarificationApi.submitAnswer(session.id,answer,lang);devLog('Answer submitted successfully');}else{devLog('Session ID missing, answer only stored locally');}return true;}catch(err){devLog('Error submitting answer:',err);toast.error(t('api.errors.update',lang));return false;}},[session,addAnswer,lang]);// 检查会话是否可以完成\nconst canFinishSession=useCallback(()=>{// 会话必须存在\nif(!session){devLog('canFinishSession失败：会话不存在');return false;}// 会话必须已经收到 END 事件，标记为完成\nif(!session.isComplete){devLog('canFinishSession失败：会话未标记为完成');return false;}// 所有已接收的问题都必须有对应的答案\nconst canFinish=session.questions.length>0&&session.answers.length>=session.questions.length;devLog(`canFinishSession检查结果: ${canFinish}, 问题数: ${session.questions.length}, 答案数: ${session.answers.length}`);return canFinish;},[session]);// Finish the session and generate the plan\nconst finishSession=useCallback(async()=>{if(!session){devLog('Cannot finish session: no active session');return null;}// 检查会话是否已经结束\nif(!session.isComplete){devLog('Cannot finish session: question stream has not ended yet');return null;}try{devLog('Finishing session');setLoading(true);// Mark the session as complete locally\ncompleteSession();// Complete the session on the backend and generate the plan\nif(session.id){devLog('Calling API to complete session');const generatedPlanId=await clarificationApi.completeSession(session.id,lang);devLog('Session completed, plan generated with ID:',generatedPlanId);return generatedPlanId;}else{devLog('Session ID missing, cannot complete session on backend');}return null;}catch(err){devLog('Error completing session:',err);toast.error(t('api.errors.default',lang));return null;}finally{setLoading(false);}},[session,completeSession,setLoading,lang]);// Cleanup effect\nuseEffect(()=>{return()=>{// Close the SSE connection when the component unmounts\nif(streamRef.current){devLog('Cleaning up SSE connection on unmount');streamRef.current.close();streamRef.current=null;}};},[]);return{session,isLoading,error,isStreamingQuestion,currentStreamedText,startSession,submitAnswer,finishSession,resetSession,canFinishSession};};","map":{"version":3,"names":["useEffect","useRef","useCallback","useClarificationStore","clarificationApi","toast","t","devLog","message","process","env","NODE_ENV","_len","arguments","length","args","Array","_key","console","log","useClarificationSession","planId","lang","undefined","session","isLoading","error","isStreamingQuestion","currentStreamedText","initSession","resetSession","handleStreamEvent","setError","setLoading","addAnswer","completeSession","streamRef","startSession","sessionId","current","createQuestionStream","event","type","errorMsg","err","submitAnswer","value","questions","currentQuestion","currentQuestionIndex","id","answer","questionId","timestamp","Date","canFinishSession","isComplete","canFinish","answers","finishSession","generatedPlanId","close"],"sources":["/home/devbox/project/src/features/clarification/hooks/useClarificationSession.ts"],"sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\nimport { useClarificationStore } from '../store/clarificationStore';\nimport { clarificationApi } from '../utils/api';\nimport { Answer, StreamEvent } from '../types';\nimport { toast } from 'sonner';\nimport { t } from '../../../lib/i18n';\nimport { Language } from '../../../lib/i18n';\n\n// 开发环境的日志帮助函数\nconst devLog = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(`[Clarification Session] ${message}`, ...args);\n  }\n};\n\nexport const useClarificationSession = (planId?: string, lang: Language = 'en') => {\n  const {\n    session,\n    isLoading,\n    error,\n    isStreamingQuestion,\n    currentStreamedText,\n    initSession,\n    resetSession,\n    handleStreamEvent,\n    setError,\n    setLoading,\n    addAnswer,\n    completeSession,\n  } = useClarificationStore();\n  \n  const streamRef = useRef<{ close: () => void } | null>(null);\n  \n  // Start a new session\n  const startSession = useCallback(async () => {\n    devLog('Starting new session');\n    try {\n      setLoading(true);\n      resetSession();\n      \n      // Start a session via the API\n      devLog('Calling API to start session');\n      const sessionId = await clarificationApi.startSession(planId, lang);\n      devLog('Session started with ID:', sessionId);\n      \n      // Initialize local session state\n      initSession(planId);\n      \n      // Create SSE connection for question streaming\n      if (sessionId) {\n        devLog('Creating SSE connection');\n        streamRef.current = clarificationApi.createQuestionStream(\n          sessionId,\n          (event: StreamEvent) => {\n            devLog('Stream event received:', event.type);\n            handleStreamEvent(event);\n          },\n          (errorMsg: string) => {\n            devLog('Stream error:', errorMsg);\n            setError(errorMsg);\n          },\n          lang\n        );\n      } else {\n        devLog('No session ID returned, cannot create stream');\n        setError(t('clarify.error.startFailed', lang));\n      }\n    } catch (err) {\n      devLog('Error starting session:', err);\n      setError(t('clarify.error.startFailed', lang));\n      toast.error(t('clarify.error.startFailed', lang));\n    } finally {\n      setLoading(false);\n    }\n  }, [planId, lang, initSession, resetSession, setLoading, setError, handleStreamEvent]);\n  \n  // Submit an answer to the current question\n  const submitAnswer = useCallback(async (value: string | number) => {\n    if (!session || !session.questions.length) {\n      devLog('Cannot submit answer: no active session or questions');\n      return false;\n    }\n    \n    try {\n      const currentQuestion = session.questions[session.currentQuestionIndex];\n      \n      if (!currentQuestion) {\n        devLog('Cannot submit answer: no current question');\n        return false;\n      }\n      \n      devLog('Submitting answer to question:', currentQuestion.id);\n      \n      const answer: Answer = {\n        questionId: currentQuestion.id,\n        value,\n        timestamp: new Date(),\n      };\n      \n      // Add the answer to the local state\n      addAnswer(answer);\n      \n      // Submit the answer to the backend\n      if (session.id) {\n        devLog('Sending answer to API');\n        await clarificationApi.submitAnswer(session.id, answer, lang);\n        devLog('Answer submitted successfully');\n      } else {\n        devLog('Session ID missing, answer only stored locally');\n      }\n      \n      return true;\n    } catch (err) {\n      devLog('Error submitting answer:', err);\n      toast.error(t('api.errors.update', lang));\n      return false;\n    }\n  }, [session, addAnswer, lang]);\n  \n  // 检查会话是否可以完成\n  const canFinishSession = useCallback(() => {\n    // 会话必须存在\n    if (!session) {\n      devLog('canFinishSession失败：会话不存在');\n      return false;\n    }\n    \n    // 会话必须已经收到 END 事件，标记为完成\n    if (!session.isComplete) {\n      devLog('canFinishSession失败：会话未标记为完成');\n      return false;\n    }\n    \n    // 所有已接收的问题都必须有对应的答案\n    const canFinish = session.questions.length > 0 && session.answers.length >= session.questions.length;\n    devLog(`canFinishSession检查结果: ${canFinish}, 问题数: ${session.questions.length}, 答案数: ${session.answers.length}`);\n    return canFinish;\n  }, [session]);\n  \n  // Finish the session and generate the plan\n  const finishSession = useCallback(async () => {\n    if (!session) {\n      devLog('Cannot finish session: no active session');\n      return null;\n    }\n    \n    // 检查会话是否已经结束\n    if (!session.isComplete) {\n      devLog('Cannot finish session: question stream has not ended yet');\n      return null;\n    }\n    \n    try {\n      devLog('Finishing session');\n      setLoading(true);\n      \n      // Mark the session as complete locally\n      completeSession();\n      \n      // Complete the session on the backend and generate the plan\n      if (session.id) {\n        devLog('Calling API to complete session');\n        const generatedPlanId = await clarificationApi.completeSession(session.id, lang);\n        devLog('Session completed, plan generated with ID:', generatedPlanId);\n        return generatedPlanId;\n      } else {\n        devLog('Session ID missing, cannot complete session on backend');\n      }\n      \n      return null;\n    } catch (err) {\n      devLog('Error completing session:', err);\n      toast.error(t('api.errors.default', lang));\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [session, completeSession, setLoading, lang]);\n  \n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      // Close the SSE connection when the component unmounts\n      if (streamRef.current) {\n        devLog('Cleaning up SSE connection on unmount');\n        streamRef.current.close();\n        streamRef.current = null;\n      }\n    };\n  }, []);\n  \n  return {\n    session,\n    isLoading,\n    error,\n    isStreamingQuestion,\n    currentStreamedText,\n    startSession,\n    submitAnswer,\n    finishSession,\n    resetSession,\n    canFinishSession,\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}