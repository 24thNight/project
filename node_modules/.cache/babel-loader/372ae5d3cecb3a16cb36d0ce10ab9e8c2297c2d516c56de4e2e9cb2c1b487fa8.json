{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\nimport { useLanguage } from '../language-context';\n/**\n * 命令面板自定义钩子\n * \n * 用于管理命令面板状态和命令执行\n */\nexport const useCommandPalette = customCommands => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    language\n  } = useLanguage();\n\n  // 提供默认命令\n  const defaultCommands = [{\n    id: 'go-to-dashboard',\n    name: language === 'zh' ? '返回任务计划' : 'Go to Dashboard',\n    description: language === 'zh' ? '返回到任务计划页面' : 'Return to the task planning dashboard',\n    action: () => {\n      window.location.href = '/dashboard';\n    }\n  }];\n\n  // 合并自定义命令和默认命令\n  const commands = [...(customCommands || []), ...defaultCommands];\n\n  // 执行命令\n  const executeCommand = commandId => {\n    const command = commands.find(cmd => cmd.id === commandId);\n    if (command) {\n      command.action();\n      setIsOpen(false);\n    } else {\n      toast.error(language === 'zh' ? '找不到命令' : 'Command not found');\n    }\n  };\n\n  // 监听快捷键\n  useEffect(() => {\n    const handleKeyDown = e => {\n      // 检查Cmd+K或Ctrl+K\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        setIsOpen(true);\n      }\n\n      // ESC关闭面板\n      if (e.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  return {\n    isOpen,\n    setIsOpen,\n    commands,\n    executeCommand\n  };\n};\n_s(useCommandPalette, \"p57XFOPGQbS5Yd6r++TNglXzvYM=\", false, function () {\n  return [useLanguage];\n});\nexport default useCommandPalette;","map":{"version":3,"names":["useState","useEffect","toast","useLanguage","useCommandPalette","customCommands","_s","isOpen","setIsOpen","language","defaultCommands","id","name","description","action","window","location","href","commands","executeCommand","commandId","command","find","cmd","error","handleKeyDown","e","metaKey","ctrlKey","key","preventDefault","addEventListener","removeEventListener"],"sources":["/home/devbox/project/src/lib/hooks/use-command-palette.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\nimport { useLanguage } from '../language-context';\n\nexport interface Command {\n  id: string;\n  name: string;\n  description: string;\n  icon?: React.ReactNode;\n  action: () => void;\n}\n\n/**\n * 命令面板自定义钩子\n * \n * 用于管理命令面板状态和命令执行\n */\nexport const useCommandPalette = (customCommands?: Command[]) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { language } = useLanguage();\n  \n  // 提供默认命令\n  const defaultCommands: Command[] = [\n    {\n      id: 'go-to-dashboard',\n      name: language === 'zh' ? '返回任务计划' : 'Go to Dashboard',\n      description: language === 'zh' ? '返回到任务计划页面' : 'Return to the task planning dashboard',\n      action: () => {\n        window.location.href = '/dashboard';\n      }\n    }\n  ];\n  \n  // 合并自定义命令和默认命令\n  const commands = [...(customCommands || []), ...defaultCommands];\n  \n  // 执行命令\n  const executeCommand = (commandId: string) => {\n    const command = commands.find(cmd => cmd.id === commandId);\n    if (command) {\n      command.action();\n      setIsOpen(false);\n    } else {\n      toast.error(language === 'zh' ? '找不到命令' : 'Command not found');\n    }\n  };\n  \n  // 监听快捷键\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // 检查Cmd+K或Ctrl+K\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        setIsOpen(true);\n      }\n      \n      // ESC关闭面板\n      if (e.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  return {\n    isOpen,\n    setIsOpen,\n    commands,\n    executeCommand\n  };\n};\n\nexport default useCommandPalette; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,QAAQ;AAC9B,SAASC,WAAW,QAAQ,qBAAqB;AAUjD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,cAA0B,IAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM;IAAES;EAAS,CAAC,GAAGN,WAAW,CAAC,CAAC;;EAElC;EACA,MAAMO,eAA0B,GAAG,CACjC;IACEC,EAAE,EAAE,iBAAiB;IACrBC,IAAI,EAAEH,QAAQ,KAAK,IAAI,GAAG,QAAQ,GAAG,iBAAiB;IACtDI,WAAW,EAAEJ,QAAQ,KAAK,IAAI,GAAG,WAAW,GAAG,uCAAuC;IACtFK,MAAM,EAAEA,CAAA,KAAM;MACZC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY;IACrC;EACF,CAAC,CACF;;EAED;EACA,MAAMC,QAAQ,GAAG,CAAC,IAAIb,cAAc,IAAI,EAAE,CAAC,EAAE,GAAGK,eAAe,CAAC;;EAEhE;EACA,MAAMS,cAAc,GAAIC,SAAiB,IAAK;IAC5C,MAAMC,OAAO,GAAGH,QAAQ,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACZ,EAAE,KAAKS,SAAS,CAAC;IAC1D,IAAIC,OAAO,EAAE;MACXA,OAAO,CAACP,MAAM,CAAC,CAAC;MAChBN,SAAS,CAAC,KAAK,CAAC;IAClB,CAAC,MAAM;MACLN,KAAK,CAACsB,KAAK,CAACf,QAAQ,KAAK,IAAI,GAAG,OAAO,GAAG,mBAAmB,CAAC;IAChE;EACF,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACd,MAAMwB,aAAa,GAAIC,CAAgB,IAAK;MAC1C;MACA,IAAI,CAACA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACG,GAAG,KAAK,GAAG,EAAE;QAC7CH,CAAC,CAACI,cAAc,CAAC,CAAC;QAClBtB,SAAS,CAAC,IAAI,CAAC;MACjB;;MAEA;MACA,IAAIkB,CAAC,CAACG,GAAG,KAAK,QAAQ,IAAItB,MAAM,EAAE;QAChCC,SAAS,CAAC,KAAK,CAAC;MAClB;IACF,CAAC;IAEDO,MAAM,CAACgB,gBAAgB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACjD,OAAO,MAAMV,MAAM,CAACiB,mBAAmB,CAAC,SAAS,EAAEP,aAAa,CAAC;EACnE,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EAEZ,OAAO;IACLA,MAAM;IACNC,SAAS;IACTU,QAAQ;IACRC;EACF,CAAC;AACH,CAAC;AAACb,EAAA,CAvDWF,iBAAiB;EAAA,QAEPD,WAAW;AAAA;AAuDlC,eAAeC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}