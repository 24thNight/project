{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'sonner';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.example.com';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Response interface according to project requirements\n\n// Error handling helper\nconst handleApiError = error => {\n  var _error$response, _error$response$data;\n  const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '操作失败，请稍后重试';\n  toast.error(message);\n  throw error;\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans() {\n    try {\n      const response = await api.get('/plans');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // 获取单个计划详情\n  async getPlanById(id) {\n    try {\n      const response = await api.get(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // 创建新计划\n  async createPlan(plan) {\n    try {\n      const response = await api.post('/plans', plan);\n      toast.success('计划创建成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // 更新计划\n  async updatePlan(id, updates) {\n    try {\n      const response = await api.put(`/plans/${id}`, updates);\n      toast.success('计划更新成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // 重命名计划\n  async renamePlan(id, newTitle) {\n    try {\n      const response = await api.patch(`/plans/${id}/rename`, {\n        title: newTitle\n      });\n      toast.success('计划重命名成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // 删除计划（软删除）\n  async deletePlan(id) {\n    try {\n      await api.delete(`/plans/${id}`);\n      toast.success('计划已删除');\n    } catch (error) {\n      handleApiError(error);\n    }\n  },\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId) {\n    try {\n      const response = await api.get(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};","map":{"version":3,"names":["axios","toast","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","handleApiError","error","_error$response","_error$response$data","message","response","data","planApi","fetchPlans","get","getPlanById","id","createPlan","plan","post","success","updatePlan","updates","put","renamePlan","newTitle","patch","title","deletePlan","delete","getPlanCurrentStage","planId"],"sources":["/home/devbox/project/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Plan } from '../types/task';\nimport { toast } from 'sonner';\n\n// API base URL - should be configured based on environment\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.example.com';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Response interface according to project requirements\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n}\n\n// Error handling helper\nconst handleApiError = (error: any): never => {\n  const message = error.response?.data?.message || '操作失败，请稍后重试';\n  toast.error(message);\n  throw error;\n};\n\n// API methods\nexport const planApi = {\n  // 获取所有计划\n  async fetchPlans(): Promise<Plan[]> {\n    try {\n      const response = await api.get<ApiResponse<Plan[]>>('/plans');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n\n  // 获取单个计划详情\n  async getPlanById(id: string): Promise<Plan> {\n    try {\n      const response = await api.get<ApiResponse<Plan>>(`/plans/${id}`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n\n  // 创建新计划\n  async createPlan(plan: Partial<Plan>): Promise<Plan> {\n    try {\n      const response = await api.post<ApiResponse<Plan>>('/plans', plan);\n      toast.success('计划创建成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n\n  // 更新计划\n  async updatePlan(id: string, updates: Partial<Plan>): Promise<Plan> {\n    try {\n      const response = await api.put<ApiResponse<Plan>>(`/plans/${id}`, updates);\n      toast.success('计划更新成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n\n  // 重命名计划\n  async renamePlan(id: string, newTitle: string): Promise<Plan> {\n    try {\n      const response = await api.patch<ApiResponse<Plan>>(`/plans/${id}/rename`, { title: newTitle });\n      toast.success('计划重命名成功');\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n\n  // 删除计划（软删除）\n  async deletePlan(id: string): Promise<void> {\n    try {\n      await api.delete<ApiResponse<null>>(`/plans/${id}`);\n      toast.success('计划已删除');\n    } catch (error) {\n      handleApiError(error);\n    }\n  },\n\n  // 获取计划当前阶段\n  async getPlanCurrentStage(planId: string): Promise<any> {\n    try {\n      const response = await api.get<ApiResponse<any>>(`/plans/${planId}/current-stage`);\n      return response.data.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}