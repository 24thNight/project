{"ast":null,"code":"// 使用与StreamEvent中questionType相同的类型定义\n// 预设的中英文问题对\n// 更丰富的问题集合，添加SWOT分析问题类型\nconst mockQuestionPairs=[{en:\"What are your strengths in English learning? For example, large vocabulary, good listening skills, etc.\",zh:\"你在英语学习方面有哪些优势？例如词汇量大、听力好等\",type:'strength'},{en:\"What are the main difficulties you encounter in preparing for the IELTS exam?\",zh:\"你在雅思考试备考中遇到的主要困难是什么？\",type:'weakness'},{en:\"What favorable factors in your environment can help you improve your English?\",zh:\"你的环境中有哪些有利因素可以帮助你提高英语水平？\",type:'opportunity'},{en:\"What objective factors might hinder your preparation?\",zh:\"有哪些可能会阻碍你备考的客观因素？\",type:'threat'},{en:\"What is your main motivation for achieving this goal?\",zh:\"请描述一下你想实现这个目标的主要原因是什么？\",type:'open'},{en:\"In what timeframe would you like to complete this goal?\",zh:\"你希望在什么时间范围内完成这个目标？\",type:'open'},{en:\"How will you measure success for this goal?\",zh:\"你将如何衡量这个目标的成功？\",type:'open'}];// 根据语言选择问题列表\nconst getMockQuestions=function(){let lang=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'en';return mockQuestionPairs.map(q=>({text:q[lang],type:q.type||'open'}));};// 生成唯一ID\nconst generateId=()=>`id-${Date.now()}-${Math.floor(Math.random()*1000)}`;// 模拟延迟\nconst delay=ms=>new Promise(resolve=>setTimeout(resolve,ms));// 存储会话状态的缓存\nconst sessionCache={};export const mockClarificationApi={// 开始一个新的会话\nstartSession:async function(planId){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';// 模拟网络延迟\nawait delay(800);const sessionId=`session-${Date.now()}`;// 初始化会话缓存\nconst questions=getMockQuestions(lang);sessionCache[sessionId]={currentQuestionIndex:0,questions,lang,streamNextQuestion:async function(){},// 将在createQuestionStream中设置\nsendEndEvent:function(){},// 将在createQuestionStream中设置\nisClosed:false};return sessionId;},// 提交答案\nsubmitAnswer:async function(sessionId,answer){let lang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'en';// 模拟网络延迟\nawait delay(500);// 检查会话是否存在\nif(!sessionCache[sessionId]){console.error('[Mock API] Session not found:',sessionId);return false;}const session=sessionCache[sessionId];// 如果还有下一个问题，流式发送它\nif(session.currentQuestionIndex<session.questions.length-1){// 增加问题索引\nsession.currentQuestionIndex+=1;// 延迟一点时间后发送下一个问题\nsetTimeout(()=>{if(!session.isClosed){session.streamNextQuestion();}},800);}else{// 这是最后一个问题的答案，发送END事件\nsetTimeout(()=>{if(!session.isClosed){session.sendEndEvent();}},800);}return true;},// 完成会话并生成计划\ncompleteSession:async sessionId=>{// 模拟网络延迟\nawait delay(1200);console.log(`[Mock API] 完成会话: ${sessionId}`);// 清理会话缓存\nif(sessionCache[sessionId]){sessionCache[sessionId].isClosed=true;delete sessionCache[sessionId];console.log(`[Mock API] 会话缓存已清理: ${sessionId}`);}else{console.log(`[Mock API] 警告: 尝试完成不存在的会话: ${sessionId}`);}// 生成一个新的计划ID\nconst newPlanId=`plan-${Date.now()}`;console.log(`[Mock API] 生成的计划ID: ${newPlanId}`);return newPlanId;},// 创建模拟问题流\ncreateQuestionStream:function(sessionId,onEvent,onError){let lang=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'en';// 检查会话是否存在\nif(!sessionCache[sessionId]){onError(`Session ${sessionId} not found`);return{close:()=>{}};}const session=sessionCache[sessionId];// 设置发送END事件的函数\nsession.sendEndEvent=()=>{if(session.isClosed)return;console.log('[Mock API] Sending END event');// 发送END事件\nonEvent({type:'end',data:'[END]'});};// 设置流式发送问题的函数\nsession.streamNextQuestion=async()=>{if(session.isClosed||session.currentQuestionIndex>=session.questions.length)return;const index=session.currentQuestionIndex;const question=session.questions[index];const questionId=generateId();// 模拟流式传输单词\nconst words=question.text.split(' ');// 先发送空字符，触发UI显示\nonEvent({type:'question',data:''});// 逐个单词发送，模拟流式效果\nfor(let i=0;i<words.length;i++){if(session.isClosed)return;// 中文使用较短的延迟，因为字符较少\nawait delay(session.lang==='zh'?200:250);onEvent({type:'question',data:(i===0?'':' ')+words[i]});}// 发送问题完成事件\nawait delay(300);if(!session.isClosed){onEvent({type:'completion',data:'question completed',id:questionId,questionType:question.type,required:true});}};// 开始发送第一个问题\nsetTimeout(()=>{if(!session.isClosed){session.streamNextQuestion();}},1000);// 返回关闭连接的方法\nreturn{close:()=>{if(sessionCache[sessionId]){sessionCache[sessionId].isClosed=true;}console.log('Mock SSE connection closed');}};}};","map":{"version":3,"names":["mockQuestionPairs","en","zh","type","getMockQuestions","lang","arguments","length","undefined","map","q","text","generateId","Date","now","Math","floor","random","delay","ms","Promise","resolve","setTimeout","sessionCache","mockClarificationApi","startSession","planId","sessionId","questions","currentQuestionIndex","streamNextQuestion","sendEndEvent","isClosed","submitAnswer","answer","console","error","session","completeSession","log","newPlanId","createQuestionStream","onEvent","onError","close","data","index","question","questionId","words","split","i","id","questionType","required"],"sources":["/home/devbox/project/src/features/clarification/utils/mock-api.ts"],"sourcesContent":["import { Answer, StreamEvent } from '../types';\nimport { Language } from '../../../lib/i18n';\n\n// 使用与StreamEvent中questionType相同的类型定义\ntype QuestionType = 'open' | 'multiple_choice' | 'scale' | 'strength' | 'weakness' | 'opportunity' | 'threat';\n\n// 预设的中英文问题对\ninterface MockQuestion {\n  en: string;\n  zh: string;\n  type?: QuestionType;\n}\n\n// 更丰富的问题集合，添加SWOT分析问题类型\nconst mockQuestionPairs: MockQuestion[] = [\n  {\n    en: \"What are your strengths in English learning? For example, large vocabulary, good listening skills, etc.\",\n    zh: \"你在英语学习方面有哪些优势？例如词汇量大、听力好等\",\n    type: 'strength'\n  },\n  {\n    en: \"What are the main difficulties you encounter in preparing for the IELTS exam?\",\n    zh: \"你在雅思考试备考中遇到的主要困难是什么？\",\n    type: 'weakness'\n  },\n  {\n    en: \"What favorable factors in your environment can help you improve your English?\",\n    zh: \"你的环境中有哪些有利因素可以帮助你提高英语水平？\",\n    type: 'opportunity'\n  },\n  {\n    en: \"What objective factors might hinder your preparation?\",\n    zh: \"有哪些可能会阻碍你备考的客观因素？\",\n    type: 'threat'\n  },\n  {\n    en: \"What is your main motivation for achieving this goal?\",\n    zh: \"请描述一下你想实现这个目标的主要原因是什么？\",\n    type: 'open'\n  },\n  {\n    en: \"In what timeframe would you like to complete this goal?\",\n    zh: \"你希望在什么时间范围内完成这个目标？\",\n    type: 'open'\n  },\n  {\n    en: \"How will you measure success for this goal?\",\n    zh: \"你将如何衡量这个目标的成功？\",\n    type: 'open'\n  }\n];\n\n// 根据语言选择问题列表\nconst getMockQuestions = (lang: Language = 'en'): Array<{text: string, type: QuestionType}> => {\n  return mockQuestionPairs.map(q => ({\n    text: q[lang],\n    type: q.type || 'open'\n  }));\n};\n\n// 生成唯一ID\nconst generateId = () => `id-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n// 模拟延迟\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// 存储会话状态的缓存\nconst sessionCache: Record<string, {\n  currentQuestionIndex: number,\n  questions: Array<{text: string, type: QuestionType}>,\n  lang: Language,\n  streamNextQuestion: () => Promise<void>,\n  sendEndEvent: () => void,\n  isClosed: boolean\n}> = {};\n\nexport const mockClarificationApi = {\n  // 开始一个新的会话\n  startSession: async (planId?: string, lang: Language = 'en') => {\n    // 模拟网络延迟\n    await delay(800);\n    const sessionId = `session-${Date.now()}`;\n    \n    // 初始化会话缓存\n    const questions = getMockQuestions(lang);\n    sessionCache[sessionId] = {\n      currentQuestionIndex: 0,\n      questions,\n      lang,\n      streamNextQuestion: async function() {},  // 将在createQuestionStream中设置\n      sendEndEvent: function() {},  // 将在createQuestionStream中设置\n      isClosed: false\n    };\n    \n    return sessionId;\n  },\n  \n  // 提交答案\n  submitAnswer: async (sessionId: string, answer: Answer, lang: Language = 'en') => {\n    // 模拟网络延迟\n    await delay(500);\n    \n    // 检查会话是否存在\n    if (!sessionCache[sessionId]) {\n      console.error('[Mock API] Session not found:', sessionId);\n      return false;\n    }\n    \n    const session = sessionCache[sessionId];\n    \n    // 如果还有下一个问题，流式发送它\n    if (session.currentQuestionIndex < session.questions.length - 1) {\n      // 增加问题索引\n      session.currentQuestionIndex += 1;\n      \n      // 延迟一点时间后发送下一个问题\n      setTimeout(() => {\n        if (!session.isClosed) {\n          session.streamNextQuestion();\n        }\n      }, 800);\n    } else {\n      // 这是最后一个问题的答案，发送END事件\n      setTimeout(() => {\n        if (!session.isClosed) {\n          session.sendEndEvent();\n        }\n      }, 800);\n    }\n    \n    return true;\n  },\n  \n  // 完成会话并生成计划\n  completeSession: async (sessionId: string) => {\n    // 模拟网络延迟\n    await delay(1200);\n    \n    console.log(`[Mock API] 完成会话: ${sessionId}`);\n    \n    // 清理会话缓存\n    if (sessionCache[sessionId]) {\n      sessionCache[sessionId].isClosed = true;\n      delete sessionCache[sessionId];\n      console.log(`[Mock API] 会话缓存已清理: ${sessionId}`);\n    } else {\n      console.log(`[Mock API] 警告: 尝试完成不存在的会话: ${sessionId}`);\n    }\n    \n    // 生成一个新的计划ID\n    const newPlanId = `plan-${Date.now()}`;\n    console.log(`[Mock API] 生成的计划ID: ${newPlanId}`);\n    \n    return newPlanId;\n  },\n  \n  // 创建模拟问题流\n  createQuestionStream: (\n    sessionId: string,\n    onEvent: (event: StreamEvent) => void,\n    onError: (error: string) => void,\n    lang: Language = 'en'\n  ) => {\n    // 检查会话是否存在\n    if (!sessionCache[sessionId]) {\n      onError(`Session ${sessionId} not found`);\n      return { close: () => {} };\n    }\n    \n    const session = sessionCache[sessionId];\n    \n    // 设置发送END事件的函数\n    session.sendEndEvent = () => {\n      if (session.isClosed) return;\n      \n      console.log('[Mock API] Sending END event');\n      \n      // 发送END事件\n      onEvent({\n        type: 'end',\n        data: '[END]'\n      });\n    };\n    \n    // 设置流式发送问题的函数\n    session.streamNextQuestion = async () => {\n      if (session.isClosed || session.currentQuestionIndex >= session.questions.length) return;\n      \n      const index = session.currentQuestionIndex;\n      const question = session.questions[index];\n      const questionId = generateId();\n      \n      // 模拟流式传输单词\n      const words = question.text.split(' ');\n      \n      // 先发送空字符，触发UI显示\n      onEvent({\n        type: 'question',\n        data: '',\n      });\n      \n      // 逐个单词发送，模拟流式效果\n      for (let i = 0; i < words.length; i++) {\n        if (session.isClosed) return;\n        \n        // 中文使用较短的延迟，因为字符较少\n        await delay(session.lang === 'zh' ? 200 : 250);\n        \n        onEvent({\n          type: 'question',\n          data: (i === 0 ? '' : ' ') + words[i],\n        });\n      }\n      \n      // 发送问题完成事件\n      await delay(300);\n      \n      if (!session.isClosed) {\n        onEvent({\n          type: 'completion',\n          data: 'question completed',\n          id: questionId,\n          questionType: question.type,\n          required: true\n        });\n      }\n    };\n    \n    // 开始发送第一个问题\n    setTimeout(() => {\n      if (!session.isClosed) {\n        session.streamNextQuestion();\n      }\n    }, 1000);\n    \n    // 返回关闭连接的方法\n    return {\n      close: () => {\n        if (sessionCache[sessionId]) {\n          sessionCache[sessionId].isClosed = true;\n        }\n        console.log('Mock SSE connection closed');\n      }\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}