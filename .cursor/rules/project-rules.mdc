---
description: 
globs: 
alwaysApply: true
---
# 技术栈与代码风格
- 使用 TypeScript 编写所有前端代码。
- 使用 React + Tailwind CSS 构建 UI，优先使用函数组件（function components）。
- 使用 shadcn/ui 提供的组件（例如 Button、Card、Dropdown 等）构建常规 UI。
- 所有组件必须使用箭头函数（arrow function）定义。
- 使用文件夹结构按功能模块组织组件（例如 features/PlanEditor、features/AIHelper）。
- 不使用类组件（class components）。

# 多语言支持
- 所有界面文本必须支持中英文切换。
- 默认使用英文，中文翻译存放在 i18n 配置中（使用 react-i18next）。
- 所有文本必须使用 `t('key')` 调用，不允许硬编码字符串。

# 可访问性与体验
- 所有交互元素（按钮、表单）必须包含 `aria-label`。
- 确保表单控件有正确的 label 和可访问键盘操作。
- 页面切换需带有过渡动画（使用 Framer Motion 实现）。
- 使用 toast（如 sonner）提示操作结果（成功、错误等）。

# 状态管理
- 使用 Zustand 管理全局状态，不使用 Redux。
- 所有页面组件尽量保持无状态，仅通过 props 或 store 获取数据。

# 组件开发规范
- 所有 UI 组件必须拆分成最小可复用单元（例如 Button、Input、Card）。
- 每个组件必须包含：props 类型、默认值说明、UI 示例、必要交互。
- 所有组件需具备响应式布局能力，优先使用 Flexbox/Grid。

# 接口交互
- 所有 API 请求封装在 `lib/api.ts` 中，使用 Axios。
- 请求必须使用 async/await，错误需捕获并展示 toast。
- 后端接口返回格式固定为 `{ success: boolean, data: T, message?: string }`。

# AI 助手功能
- 所有与 AI 的交互必须通过统一的 hook（如 `useAI()`）。
- 用户输入应支持上下文记录，并在界面可视化展示。
- AI 生成的内容必须标注来源，并支持“编辑再发送”功能。

# 文件命名 & 目录结构
- 所有文件使用 kebab-case 命名（例如 `task-planner.tsx`）。
- 所有组件放在 `src/components/` 下，页面放在 `src/pages/`。
- 所有类型定义放在 `src/types/`，全局样式放在 `src/styles/`。

# 测试与质量保障
- 所有重要组件必须有测试文件（使用 Vitest + Testing Library）。
- 组件需覆盖输入/输出/交互逻辑的测试。
- 避免使用 `any`，尽量使用准确的类型约束。


### 命名规范
```
类名：PascalCase（大驼峰）
函数名：camelCase（小驼峰）或 snake_case
常量：UPPER_SNAKE_CASE
变量：camelCase 或 snake_case
```
### 代码质量原则
- 遵循 SOLID 设计原则
- 避免代码重复（DRY原则）
- 保持代码简洁、清晰、易读
- 考虑代码的可维护性和可扩展性
### 异常处理
- 合理使用异常处理机制
- 提供清晰的错误信息
- 记录必要的错误日志
- 优雅处理边界情况

## 3. 文档规范
### 代码注释
```
/**
 * 函数功能说明
 * 
 * @param {参数类型} 参数名 - 参数说明
 * @returns {返回类型} 返回值说明
 */
```
### 项目文档
- 及时更新 README 和技术文档
- 使用中文编写文档
- 包含必要的安装和使用说明
- 记录重要的架构决策
### 国际化准备
- 代码注释使用中文
- 错误信息和日志使用中文描述
- 预留国际化支持的接口

## 4. 开发环境
### 依赖管理
- 使用项目对应语言的包管理工具
- 锁定依赖版本，确保构建稳定性
- 定期更新依赖，修复安全隐患
- 优先使用现有库和工具，避免重新发明轮子

## 5. 版本控制规范
### 基础配置
- 使用 Git 作为版本控制系统
- 设置合适的 .gitignore 文件
- 保护主分支，实施分支权限控制
### 分支管理
- 采用规范的分支开发流程（如 Git Flow 或 Trunk Based Development）
- 主分支保持稳定，开发在特性分支进行
- 定期清理过期分支
### 提交规范
- 使用清晰的 commit 信息
- 每个提交专注于单一功能或修复
- 合理使用 tag 标记版本
### 代码审查
- 所有代码变更必须经过审查
- 遵循代码审查清单
- 及时响应审查意见
- 确保代码质量和一致性

## 6. 测试规范
### 测试原则
- 遵循测试金字塔原则
- 保持测试代码的整洁和可维护性
- 避免测试代码重复
- 关注测试覆盖率
### 测试类型
- 单元测试：测试独立功能单元
- 集成测试：测试模块间交互
- 端到端测试：测试完整业务流程
- 性能测试：关键功能性能验证

## 7. 安全规范
- 使用环境变量存储敏感配置
- 避免在代码中硬编码敏感信息
- 定期更新依赖包版本
- 实施安全扫描